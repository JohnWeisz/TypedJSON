{"version":3,"sources":["webpack://typedjson/webpack/universalModuleDefinition","webpack://typedjson/webpack/bootstrap","webpack://typedjson/./src/typedjson/helpers.ts","webpack://typedjson/./src/typedjson/metadata.ts","webpack://typedjson/./src/typedjson/options-base.ts","webpack://typedjson/./src/typedjson/type-descriptor.ts","webpack://typedjson/./src/typedjson/deserializer.ts","webpack://typedjson/./src/typedjson/json-array-member.ts","webpack://typedjson/./src/typedjson/serializer.ts","webpack://typedjson/./src/parser.ts","webpack://typedjson/./src/typedjson/json-object.ts","webpack://typedjson/./src/typedjson/json-member.ts","webpack://typedjson/./src/typedjson/json-set-member.ts","webpack://typedjson/./src/typedjson/json-map-member.ts","webpack://typedjson/./src/typedjson/to-json.ts","webpack://typedjson/./src/typedjson.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;AC5EO,IAAM,wBAAwB,GAAG,2DAA2D;MAC7F,qDAAqD,CAAC;AAE5D;;;;GAIG;AACI,SAAS,gCAAgC,CAAC,IAAc;IAC3D,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,IAAW,CAAC,CAAC,CAAC;AAC1E,CAAC;AAEM,SAAS,kCAAkC,CAAC,IAAc;IAC7D,OAAO,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,IAAW,CAAC,CAAC,CAAC;AACpE,CAAC;AAEM,SAAS,gBAAgB,CAAC,IAAc;IAC3C,OAAO,OAAO,CAAC,CAAC,CAAC,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,iBAAiB,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC;SACnI,OAAO,CAAC,IAAW,CAAC,CAAC,CAAC;AAC/B,CAAC;AAEM,SAAS,QAAQ,CAAC,KAAU;IAC/B,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;AACrC,CAAC;AAED,SAAS,qBAAqB,CAAC,OAAe,EAAE,YAAsB;IAClE,IAAM,+BAA+B,GAAG,YAAY,KAAK,MAAM;WACxD,YAAY,KAAK,WAAW;WAC5B,YAAY,KAAK,QAAQ,CAAC;IAEjC,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC;IACnG,IAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IAE/C,OAAO,CAAC,+BAA+B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,IAAI,YAAY,KAAK,IAAI,CAAC,CAAC;AACpH,CAAC;AAEM,SAAS,eAAe,CAAI,IAAS,EAAE,YAA6B;IACvE,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,qBAAqB,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE;QACzE,OAAO,IAAI,CAAC;KACb;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;AAED;;;;GAIG;AACI,SAAS,WAAW,CAAC,CAAW,EAAE,CAAW;IAChD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,YAAY,CAAC,CAAC;AAC/C,CAAC;AAEM,SAAS,QAAQ,CAAC,OAAa;IAAE,wBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,uCAA6B;;IACjE,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,EAAE;QACpE,OAAO,CAAC,KAAK,OAAb,OAAO,kBAAO,OAAO,GAAK,cAAc,GAAE;KAC7C;SAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,UAAU,EAAE;QACzE,OAAO,CAAC,GAAG,OAAX,OAAO,kBAAK,YAAU,OAAS,GAAK,cAAc,GAAE;KACvD;AACL,CAAC;AAEM,SAAS,UAAU,CAAC,OAAa;IAAE,wBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,uCAA6B;;IACnE,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,UAAU,EAAE;QAClE,OAAO,CAAC,GAAG,OAAX,OAAO,kBAAK,OAAO,GAAK,cAAc,GAAE;KAC3C;AACL,CAAC;AAEM,SAAS,UAAU,CAAC,OAAa;IAAE,wBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,uCAA6B;;IACnE,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;QACnE,OAAO,CAAC,IAAI,OAAZ,OAAO,kBAAM,OAAO,GAAK,cAAc,GAAE;KAC5C;SAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,UAAU,EAAE;QACzE,OAAO,CAAC,GAAG,OAAX,OAAO,kBAAK,cAAY,OAAS,GAAK,cAAc,GAAE;KACzD;AACL,CAAC;AAED;;;GAGG;AACI,SAAS,cAAc,CAAI,KAAQ;IACtC,OAAO,CAAC,CAAC,OAAO,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC;AAC7D,CAAC;AAEM,SAAS,YAAY,CAAI,KAAU,EAAE,WAAqB;IAC7D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,OAAO,WAAW,KAAK,MAAM,CAAC;KACjC;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAClC,OAAO,WAAW,KAAK,MAAM,CAAC;KACjC;SAAM,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;QACnC,OAAO,WAAW,KAAK,OAAO,CAAC;KAClC;SAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACxB,OAAO,KAAK,YAAY,WAAW,CAAC;KACvC;IAED,OAAO,KAAK,CAAC;AACjB,CAAC;AAEM,IAAM,0BAA0B,GACnC,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,UAAU,CAAC;AAE7E;;;GAGG;AACI,SAAS,MAAM,CAAC,EAAgC;IACnD,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,QAAQ,EAAE;QAC7B,OAAO,EAAE,CAAC,IAAI,CAAC;KAClB;IACD,OAAO,WAAW,CAAC;AACvB,CAAC;AAEM,SAAS,QAAQ,CAAI,GAAM;IAC9B,OAAO,GAAG,CAAC;AACf,CAAC;;;ACtH8F;AAKxF,IAAM,kBAAkB,GAAG,4CAA4C,CAAC;AAoC/E;IAiFI,aAAa;IAEb,4BACI,SAAmB;QAKvB,gBAAW,GAAG,IAAI,GAAG,EAA8B,CAAC;QAEpD,8DAA8D;QAC9D,eAAU,GAAG,IAAI,GAAG,EAAqB,CAAC;QAS1C;;;WAGG;QACH,uBAAkB,GAAY,KAAK,CAAC;QAEpC;;;WAGG;QACH,+BAA0B,GAAY,KAAK,CAAC;QAzBxC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAtFD,iBAAiB;IACjB;;;OAGG;IACI,oCAAiB,GAAxB,UAAyB,IAAc;QACnC,IAAM,QAAQ,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC7D,OAAO,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAChE,CAAC;IAED;;;OAGG;IACI,qCAAkB,GAAzB,UAA6B,IAAqB;QAC9C,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,SAAS,EAAE;YACZ,OAAO;SACV;QAED,IAAI,QAAwC,CAAC;QAC7C,IAAI,SAAS,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAC9C,uDAAuD;YACvD,QAAQ,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAC;SAC5C;QAED,0DAA0D;QAC1D,IAAI,QAAQ,IAAI,QAAQ,CAAC,kBAAkB,EAAE;YACzC,OAAO,QAAQ,CAAC;SACnB;QAED,gEAAgE;QAChE,IAAI,kBAAkB,CAAC,2BAA2B,CAAC,IAAI,CAAC,EAAE;YACtD,IAAM,aAAa,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACnD,aAAa,CAAC,kBAAkB,GAAG,IAAI,CAAC;YACxC,oEAAoE;YACpE,OAAO,aAAa,CAAC;SACxB;IACL,CAAC;IAEM,2CAAwB,GAA/B,UAAgC,SAAwB;QACpD,IAAI,SAAS,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAC9C,OAAO,SAAS,CAAC,kBAAkB,CAAC,CAAC;SACxC;QACG,0EAA0E;QAC9E,IAAM,cAAc,GAAG,IAAI,kBAAkB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAErE,yEAAyE;QACzE,IAAM,cAAc,GAAuB,SAAS,CAAC,kBAAkB,CAAC,CAAC;QACzE,IAAI,cAAc,EAAE;YAChB,cAAc,CAAC,WAAW;iBACrB,OAAO,CAAC,UAAC,cAAc,EAAE,OAAO,IAAK,qBAAc,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,EAAvD,CAAuD,CAAC,CAAC;YACnG,cAAc,CAAC,UAAU;iBACpB,OAAO,CAAC,UAAC,SAAS,IAAK,qBAAc,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAxC,CAAwC,CAAC,CAAC;YACtE,cAAc,CAAC,YAAY,GAAG,cAAc,CAAC,YAAY,CAAC;YAC1D,cAAc,CAAC,eAAe,GAAG,cAAc,CAAC,eAAe,CAAC;SACnE;QAED,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,kBAAkB,EAAE;YACjD,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,cAAc;SACxB,CAAC,CAAC;QACH,OAAO,cAAc,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACI,2CAAwB,GAA/B,UAAgC,WAAqB;QACjD,IAAM,QAAQ,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACpE,OAAO,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACvE,CAAC;IAEc,8CAA2B,GAA1C,UAA2C,IAAc;QACrD,OAAO,gCAAgC,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC;eAChE,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,WAAW,CAAC;IACrD,CAAC;IA2CL,yBAAC;AAAD,CAAC;;AAEM,SAAS,yBAAyB,CAAC,SAAwB,EAAE,OAAwB,EAAE,QAA4B;IACtH,IAAM,aAAa,GAAG,oBAAkB,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,SAAI,MAAM,CAAC,OAAO,CAAG,CAAC,CAAC,sBAAsB;IAElH,oGAAoG;IACpG,4GAA4G;IAC5G,2DAA2D;IAC3D,IAAI,OAAO,SAAS,KAAK,UAAU,EAAE;QACjC,QAAQ,CAAI,aAAa,oCAAiC,CAAC,CAAC;QAC5D,OAAO;KACV;IAED,gCAAgC;IAChC,oDAAoD;IACpD,IAAI,OAAO,SAAS,CAAC,OAAO,CAAC,KAAK,UAAU,EAAE;QAC1C,QAAQ,CAAI,aAAa,oCAAiC,CAAC,CAAC;QAC5D,OAAO;KACV;IAED,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;QACzD,QAAQ,CAAI,aAAa,2CAAwC,CAAC,CAAC;QACnE,OAAO;KACV;IAED,+FAA+F;IAC/F,2HAA2H;IAC3H,IAAM,cAAc,GAAG,2BAAkB,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;IAE9E,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;QACxB,gDAAgD;QAChD,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,cAAI,IAAI,qBAAc,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAnC,CAAmC,CAAC,CAAC;KACjF;IAED,wDAAwD;IACvD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAgC;SAChD,OAAO,CAAC,UAAC,GAAG,IAAK,QAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,EAArD,CAAqD,CAAC,CAAC;IAC7E,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC5D,CAAC;;;;;;;;;;;;;;AC5LD,IAAM,WAAW,GAA6B;IAC1C,cAAc;CACjB,CAAC;AAEK,SAAS,iBAAiB,CAAC,IAAwC;IACtE,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;SAC5B,MAAM,CAAC,aAAG,IAAI,OAAC,WAA6B,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAhD,CAAgD,CAAC;SAC/D,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;QACb,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO,GAAG,CAAC;IACf,CAAC,EAAE,EAAS,CAAC,CAAC;IAClB,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;AACjE,CAAC;AAEM,SAAS,kBAAkB,CAA8B,GAAM;IAClE,QAAQ,GAAG,EAAE;QACT,KAAK,cAAc;YACf,OAAO,KAAK,CAAC;KACpB;IACD,gBAAgB;IAChB,OAAO,IAAW,CAAC;AACvB,CAAC;AAEM,SAAS,cAAc,CAC1B,GAAM,EACN,OAAqB;IAErB,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;QACzC,OAAO,OAAO,CAAC,GAAG,CAAE,CAAC;KACpB;IACG,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC;AACnC,CAAC;AAEM,SAAS,YAAY,CACxB,QAAsB,EACtB,YAA0B;IAE1B,OAAO,CAAC,YAAY;QAChB,CAAC,CAAC,QAAQ;QACV,CAAC,uBAEM,QAAQ,GACR,YAAY,CAClB,CAAC;AACV,CAAC;;;;;;;;;;;;;;;;AC1DD;IACI,wBAA+B,IAAc;QAAd,SAAI,GAAJ,IAAI,CAAU;IAAG,CAAC;IAEjD,iCAAQ,GAAR;QACI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IACL,qBAAC;AAAD,CAAC;;AAID;IAA4C,0CAAc;IACtD,gCAAY,IAAc;eACtB,kBAAM,IAAI,CAAC;IACf,CAAC;IACL,6BAAC;AAAD,CAAC,CAJ2C,cAAc,GAIzD;;AAED;IAAoD,yCAAc;IAC9D,+BAAsB,IAAc;eAChC,kBAAM,IAAI,CAAC;IACf,CAAC;IACL,4BAAC;AAAD,CAAC,CAJmD,cAAc,GAIjE;;AAED;IAAyC,uCAAqB;IAC1D,6BAAqB,WAA2B;QAAhD,YACI,kBAAM,KAAK,CAAC,SACf;QAFoB,iBAAW,GAAX,WAAW,CAAgB;;IAEhD,CAAC;IAED,sCAAQ,GAAR;QACI,OAAO,iBAAM,QAAQ,WAAE,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChE,CAAC;IACL,0BAAC;AAAD,CAAC,CARwC,qBAAqB,GAQ7D;;AAEM,SAAS,MAAM,CAAC,WAAqB;IACxC,OAAO,IAAI,mBAAmB,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC;AACtE,CAAC;AAED;IAAuC,qCAAqB;IACxD,2BAAqB,WAA2B;QAAhD,YACI,kBAAM,GAAG,CAAC,SACb;QAFoB,iBAAW,GAAX,WAAW,CAAgB;;IAEhD,CAAC;IAED,oCAAQ,GAAR;QACI,OAAO,iBAAM,QAAQ,WAAE,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChE,CAAC;IACL,wBAAC;AAAD,CAAC,CARsC,qBAAqB,GAQ3D;;AAEM,SAAS,IAAI,CAAC,WAAqB;IACtC,OAAO,IAAI,iBAAiB,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC;AACpE,CAAC;AAqBD;IAAuC,qCAAqB;IACxD,2BACa,OAAuB,EACvB,SAAyB,EACzB,OAA6B;QAH1C,YAKI,kBAAM,GAAG,CAAC,SACb;QALY,aAAO,GAAP,OAAO,CAAgB;QACvB,eAAS,GAAT,SAAS,CAAgB;QACzB,aAAO,GAAP,OAAO,CAAsB;;IAG1C,CAAC;IAED,oCAAQ,GAAR;QACI,OAAO,iBAAM,QAAQ,WAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;IACvF,CAAC;IAED,8CAAkB,GAAlB;;QACI,OAAO;YACH,KAAK,EAAE,WAAI,CAAC,OAAO,0CAAE,KAAK,EAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,cAAe;SACnE,CAAC;IACN,CAAC;IACL,wBAAC;AAAD,CAAC,CAlBsC,qBAAqB,GAkB3D;;AAEM,SAAS,IAAI,CAAC,OAAiB,EAAE,SAAmB,EAAE,OAA6B;IACtF,OAAO,IAAI,iBAAiB,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,oBAAoB,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC;AAC1G,CAAC;AAED,oEAAoE;AACpE,wEAAwE;AACxE,iEAAiE;AACjE,yBAAyB;AACzB,QAAQ;AACR,EAAE;AACF,+BAA+B;AAC/B,uEAAuE;AACvE,QAAQ;AACR,IAAI;AACJ,EAAE;AACF,2EAA2E;AAC3E,8EAA8E;AAC9E,IAAI;AAEG,SAAS,UAAU,CAAC,IAAS;IAChC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,UAAU,IAAI,IAAI,YAAY,cAAc,CAAC,CAAC;AAClF,CAAC;AAEM,SAAS,oBAAoB,CAAC,IAAc;IAC/C,OAAO,IAAI,YAAY,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC;AACpF,CAAC;;;AClHuE;AACZ;AACa;AAQ9C;AAGpB,SAAS,mBAAmB,CAAC,YAA2B,EAAE,UAAiC;IAC9F,IAAI,YAAY,CAAC,MAAM,EAAE;QAC7B,OAAO,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;KAC1C;AACD,CAAC;AAWD;;;GAGG;AACH;IAAA;QAGY,iBAAY,GAAiB,mBAAmB,CAAC;QAEjD,iBAAY,GAA2B,QAAQ,CAAC;QAChD,4BAAuB,GAAG,IAAI,GAAG,CAA8D;YACnG,aAAa;YACb,CAAC,MAAM,EAAE,mBAAmB,CAAC;YAC7B,CAAC,MAAM,EAAE,mBAAmB,CAAC;YAC7B,CAAC,OAAO,EAAE,mBAAmB,CAAC;YAE9B,CAAC,IAAI,EAAE,eAAe,CAAC;YACvB,CAAC,WAAW,EAAE,mBAAmB,CAAC;YAClC,CAAC,QAAQ,EAAE,gBAAgB,CAAC;YAE5B,CAAC,KAAK,EAAE,cAAc,CAAC;YACvB,CAAC,GAAG,EAAE,YAAY,CAAC;YACnB,CAAC,GAAG,EAAE,YAAY,CAAC;YAEnB,eAAe;YACf,CAAC,YAAY,EAAE,mBAAmB,CAAC;YACnC,CAAC,YAAY,EAAE,mBAAmB,CAAC;YACnC,CAAC,UAAU,EAAE,kBAAkB,CAAC;YAChC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;YACvC,CAAC,WAAW,EAAE,kBAAkB,CAAC;YACjC,CAAC,WAAW,EAAE,kBAAkB,CAAC;SACpC,CAAC,CAAC;IAsGP,CAAC;IApGG,sCAAe,GAAf,UAAgB,oBAAgD;QAC5D,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;IAC7C,CAAC;IAED,sCAAe,GAAf,UAAgB,oBAAkC;QAC9C,IAAI,OAAO,oBAAoB,KAAK,UAAU,EAAE;YAC5C,MAAM,IAAI,SAAS,CAAC,6CAA6C,CAAC,CAAC;SACtE;QAED,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;IAC7C,CAAC;IAED,sCAAe,GAAf;QACI,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,sCAAe,GAAf,UAAgB,oBAA4C;QACxD,IAAI,OAAO,oBAAoB,KAAK,UAAU,EAAE;YAC5C,MAAM,IAAI,SAAS,CAAC,6CAA6C,CAAC,CAAC;SACtE;QAED,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;IAC7C,CAAC;IAED,sCAAe,GAAf;QACI,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,yCAAkB,GAAlB,UACI,YAAiB,EACjB,cAA8B,EAC9B,UAAiC,EACjC,UAAqB,EACrB,aAA2B;QAD3B,kDAAqB;QAGrB,IAAI,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,YAAY,KAAK,IAAI,EAAE;YACnE,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;YACtC,OAAO;SACV;QAED,IAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC3E,IAAI,YAAY,EAAE;YACd,OAAO,YAAY,CAAC,YAAY,EAAE,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;SAClG;QAED,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;YAClC,OAAO,eAAe,CAAC,YAAY,EAAE,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;SACtF;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,SAAS,CAC3B,4BAA0B,UAAU,iDAA8C,CAC7F,CAAC,CAAC;IACC,CAAC;IAED,sCAAe,GAAf,UAAgB,IAAS;QACrB,OAAO,IAAI,IAAI,EAAE,CAAC;IACtB,CAAC;IAED,sCAAe,GAAf;QAAA,iBAcC;QAde,uBAA8C;aAA9C,UAA8C,EAA9C,qBAA8C,EAA9C,IAA8C;YAA9C,kCAA8C;;QAC1D,IAAM,MAAM,GAAG,IAAI,GAAG,EAAoB,CAAC;QAE3C,aAAa,CAAC,OAAO,CAAC,oBAAU;YAC5B,UAAU,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,IAAI;gBAC1B,IAAI,KAAI,CAAC,YAAY,EAAE;oBACnB,MAAM,CAAC,GAAG,CAAC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;iBAC7C;qBAAM;oBACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;iBAC1B;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,0CAAmB,GAAnB,UAAoB,SAAwB;QAA5C,iBAgBC;QAfG,IAAM,GAAG,GAAG,IAAI,GAAG,EAAoB,CAAC;QAExC,SAAS,CAAC,OAAO,CAAC,cAAI;YAClB,IAAI,KAAI,CAAC,YAAY,EAAE;gBACnB,GAAG,CAAC,GAAG,CAAC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;aAC1C;iBAAM;gBACH,IAAM,aAAa,GAAG,2BAAkB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBAClE,IAAM,MAAI,GAAG,aAAa,IAAI,aAAa,CAAC,kBAAkB,IAAI,aAAa,CAAC,IAAI;oBAChF,CAAC,CAAC,aAAa,CAAC,IAAI;oBACpB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gBAChB,GAAG,CAAC,GAAG,CAAC,MAAI,EAAE,IAAI,CAAC,CAAC;aACvB;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACf,CAAC;IAEO,yCAAkB,GAA1B,UAA2B,MAAW,EAAE,aAAuB;QAC3D,OAAO,CAAC,aAAa,kBAAmB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;eAC/D,CAAC,aAAa,mBAAoB,IAAI,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC;IACzE,CAAC;IAED,2CAAoB,GAApB,UAAqB,aAA2B;QAC5C,OAAO,cAAc,CAAC,cAAc,EAAE,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC;IACrF,CAAC;IACL,mBAAC;AAAD,CAAC;;AAED,SAAS,sBAAsB,CAC3B,UAAkB,EAClB,kBAA0B,EAC1B,gBAAwB,EACxB,UAAkB;IAElB,MAAM,IAAI,SAAS,CACf,2BAAyB,UAAU,YAAO,UAAU,MAAG;WACrD,eAAa,kBAAkB,cAAS,gBAAgB,MAAG,EAChE,CAAC;AACN,CAAC;AAED,SAAS,oBAAoB,CAAC,YAA+B,EAAE,UAA6B,EAAE,UAAkB;IAC5G,IAAM,gBAAgB,GAAG,OAAO,YAAY,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;IAClG,IAAM,cAAc,GAAG,OAAO,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;IAE1F,OAAO,2BAAyB,UAAU,oBAAe,gBAAgB,gBAAW,cAAc,OAAI,CAAC;AAC3G,CAAC;AAED,SAAS,mBAAmB,CAAC,YAAiB;IAC1C,OAAO,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;AACzE,CAAC;AAED,SAAS,mBAAmB,CACxB,YAAe,EACf,cAA8B,EAC9B,UAAiC,EACjC,UAAkB;IAElB,IAAI,YAAY,CAAC,WAAW,KAAK,cAAc,CAAC,IAAI,EAAE;QAClD,MAAM,IAAI,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;KAChH;IACD,OAAO,YAAY,CAAC;AACxB,CAAC;AAED,SAAS,eAAe,CACpB,YAA2B,EAC3B,cAAsC,EACtC,UAAiC,EACjC,UAAkB,EAClB,YAA+B;IAE/B,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,EAAE;QAC3D,YAAY,CAAC,eAAe,EAAE,CAC1B,IAAI,SAAS,CAAC,wBAAsB,UAAU,+CAA4C,CAAC,CAC9F,CAAC;QACF,OAAO,SAAS,CAAC;KACpB;IAED,IAAI,gBAAgB,GAAG,cAAc,CAAC,IAAI,CAAC;IAC3C,IAAI,oBAAoB,GAAG,2BAAkB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;IACnF,IAAI,qBAAqB,GAAG,UAAU,CAAC;IACvC,IAAI,YAAY,GAAG,YAAY,CAAC,eAAe,EAAE,CAAC;IAElD,IAAI,oBAAoB,EAAE;QACtB,wFAAwF;QACxF,qBAAqB,GAAG,YAAY,CAAC,eAAe,CAChD,qBAAqB,EACrB,YAAY,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,UAAU,CAAC,CACpE,CAAC;QACF,IAAI,oBAAoB,CAAC,YAAY,EAAE;YACnC,YAAY,GAAG,oBAAoB,CAAC,YAAY,CAAC;SACpD;KACJ;IAED,4DAA4D;IAC5D,IAAM,gBAAgB,GAAG,YAAY,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC;IAE3E,IAAI,gBAAgB,EAAE;QAClB,qEAAqE;QACrE,IAAI,WAAW,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAAE;YACjD,YAAY;YACZ,gBAAgB,GAAG,gBAAgB,CAAC;YACpC,oBAAoB,GAAG,2BAAkB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;YAE/E,IAAI,oBAAoB,EAAE;gBACtB,2CAA2C;gBAC3C,qBAAqB,GAAG,YAAY,CAAC,eAAe,CAChD,qBAAqB,EACrB,YAAY,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,UAAU,CAAC,CACpE,CAAC;aACL;SACJ;KACJ;IAED,IAAI,oBAAoB,IAAI,oBAAoB,CAAC,kBAAkB,EAAE;QACjE,IAAM,gBAAc,GAAG,oBAAoB,CAAC;QAC5C,qDAAqD;QACrD,wDAAwD;QACxD,IAAM,wCAAsC,GAAG,EAAmB,CAAC;QAEnE,IAAM,cAAY,GAAG,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,gBAAc,CAAC,OAAO,CAAC,CAAC;QAEhF,sCAAsC;QACtC,gBAAc,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,iBAAiB,EAAE,OAAO;YAC1D,IAAM,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;YAC7C,IAAM,kBAAkB,GAAM,MAAM,CAAC,gBAAc,CAAC,SAAS,CAAC,SAAI,OAAS,CAAC;YAC5E,IAAM,gBAAgB,GAAG,YAAY,CAAC,cAAY,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE/E,IAAI,YAAY,CAAC;YACjB,IAAI,iBAAiB,CAAC,YAAY,EAAE;gBAChC,YAAY,GAAG,iBAAiB,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;aACjE;iBAAM,IAAI,iBAAiB,CAAC,IAAI,EAAE;gBAC/B,YAAY,GAAG,YAAY,CAAC,kBAAkB,CAC1C,cAAc,EACd,iBAAiB,CAAC,IAAI,EACtB,qBAAqB,EACrB,kBAAkB,EAClB,gBAAgB,CACnB,CAAC;aACL;iBAAM;gBACH,MAAM,IAAI,SAAS,CACf,wBAAsB,kBAAkB,cAAW;sBACjD,sDAAsD,CAC3D,CAAC;aACL;YAED,IAAI,cAAc,CAAC,YAAY,CAAC;mBACzB,CAAC,YAAY,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,IAAI,YAAY,KAAK,IAAI,CAAC,EACnF;gBACE,wCAAsC,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;aAChF;iBAAM,IAAI,iBAAiB,CAAC,UAAU,EAAE;gBACrC,YAAY,CAAC,eAAe,EAAE,CAAC,IAAI,SAAS,CAAC,8BAA4B,kBAAkB,OAAI,CAAC,CAAC,CAAC;aACrG;QACL,CAAC,CAAC,CAAC;QAEH,mCAAmC;QACnC,IAAI,YAAY,SAAe,CAAC;QAEhC,IAAI,OAAO,oBAAoB,CAAC,mBAAmB,KAAK,UAAU,EAAE;YAChE,IAAI;gBACA,YAAY,GAAG,oBAAoB,CAAC,mBAAmB,CACnD,wCAAsC,EACtC,YAAY,CACf,CAAC;gBAEF,2DAA2D;gBAC3D,IAAI,CAAC,YAAY,EAAE;oBACf,MAAM,IAAI,SAAS,CACf,wBAAsB,UAAU,MAAG;0BACjC,iDAAiD;2BACjD,YAAU,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,oBAAiB,EACtE,CAAC;iBACL;qBAAM,IAAI,CAAC,CAAC,YAAY,YAAY,oBAAoB,CAAC,SAAS,CAAC,EAAE;oBAClE,MAAM,IAAI,SAAS,CACf,wBAAsB,UAAU,MAAG;2BACjC,6BAA2B,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,MAAG;2BAC9D,YAAU,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,mBAAgB;2BAChE,YAAU,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,0BAAuB;2BACjE,OAAK,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,MAAG,EACnD,CAAC;iBACL;aACJ;YAAC,OAAO,CAAC,EAAE;gBACR,YAAY,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClC,OAAO,SAAS,CAAC;aACpB;SACJ;aAAM;YACH,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;SACjE;QAED,4DAA4D;QAC5D,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,wCAAsC,CAAC,CAAC;QAEpE,uCAAuC;QACvC,IAAI,oBAAoB,CAAC,wBAAwB,EAAE;YAC/C,yBAAyB;YACzB,IAAI,OAAQ,YAAoB,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,KAAK,UAAU,EAAE;gBAC3F,YAAoB,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,EAAE,CAAC;aAC1E;YACD,mBAAmB;iBACd,IAAI,OAAQ,YAAY,CAAC,WAAmB,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,KAAK,UAAU,EAAE;gBAC5G,YAAY,CAAC,WAAmB,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,EAAE,CAAC;aACtF;iBAAM;gBACH,YAAY,CAAC,eAAe,EAAE,CAAC,IAAI,SAAS,CACxC,8BAA4B,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,SAAI,oBAAoB,CAAC,wBAAwB,uBAAoB,CAC1I,CAAC,CAAC;aACN;SACJ;QAED,OAAO,YAAY,CAAC;KACvB;SAAM;QACH,gDAAgD;QAChD,IAAM,cAAY,GAAG,EAAmB,CAAC;QAEzC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,mBAAS;YACvC,cAAY,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,kBAAkB,CACrD,YAAY,CAAC,SAAS,CAAC,EACvB,IAAI,sBAAsB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,EAC/D,UAAU,EACV,SAAS,CACZ,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,cAAY,CAAC;KACvB;AACL,CAAC;AAED,SAAS,cAAc,CACnB,YAAiB,EACjB,cAA8B,EAC9B,UAAiC,EACjC,UAAkB,EAClB,YAA+B,EAC/B,aAA2B;IAE3B,IAAI,CAAC,CAAC,cAAc,YAAY,mBAAmB,CAAC,EAAE;QAClD,MAAM,IAAI,SAAS,CAAC,2BAAyB,UAAU,6DAA0D;cAC3G,8CAA8C,CAAC,CAAC;KACzD;IACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QAC9B,YAAY,CAAC,eAAe,EAAE,CAC1B,IAAI,SAAS,CAAC,oBAAoB,CAAC,KAAK,EAAE,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CACnF,CAAC;QACF,OAAO,EAAE,CAAC;KACb;IAED,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;QAC7B,YAAY,CAAC,eAAe,EAAE,CAC1B,IAAI,SAAS,CAAC,2BAAyB,UAAU,gEAA6D,CAAC,CAClH,CAAC;QACF,OAAO,EAAE,CAAC;KACb;IAED,OAAO,YAAY,CAAC,GAAG,CAAC,iBAAO;QAC3B,0IAA0I;QAC1I,mCAAmC;QACnC,IAAI;YACA,OAAO,YAAY,CAAC,kBAAkB,CAClC,OAAO,EACP,cAAc,CAAC,WAAW,EAC1B,UAAU,EACP,UAAU,OAAI,EACjB,aAAa,CAChB,CAAC;SACL;QAAC,OAAO,CAAC,EAAE;YACR,YAAY,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;YAElC,wEAAwE;YACxE,kFAAkF;YAClF,OAAO,SAAS,CAAC;SACpB;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAED,SAAS,YAAY,CACjB,YAAiB,EACjB,cAA8B,EAC9B,UAAiC,EACjC,UAAkB,EAClB,YAA+B,EAC/B,aAA2B;IAE3B,IAAI,CAAC,CAAC,cAAc,YAAY,iBAAiB,CAAC,EAAE;QAChD,MAAM,IAAI,SAAS,CAAC,2BAAyB,UAAU,2DAAwD;cACzG,8CAA8C,CAAC,CAAC;KACzD;IACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QAC9B,YAAY,CAAC,eAAe,EAAE,CAAC,IAAI,SAAS,CAAC,oBAAoB,CAAC,KAAK,EAAE,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;QACjH,OAAO,IAAI,GAAG,EAAO,CAAC;KACzB;IAED,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;QAC7B,YAAY,CAAC,eAAe,EAAE,CAC1B,IAAI,SAAS,CAAC,2BAAyB,UAAU,4DAAyD,CAAC,CAC9G,CAAC;QACF,OAAO,IAAI,GAAG,EAAO,CAAC;KACzB;IAED,IAAM,SAAS,GAAG,IAAI,GAAG,EAAO,CAAC;IAEjC,YAAY,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,CAAC;QAC5B,IAAI;YACA,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,kBAAkB,CACzC,OAAO,EACP,cAAc,CAAC,WAAW,EAC1B,UAAU,EACP,UAAU,SAAI,CAAC,MAAG,EACrB,aAAa,CAChB,CAAC,CAAC;SACN;QAAC,OAAO,CAAC,EAAE;YACR,kFAAkF;YAClF,0BAA0B;YAC1B,YAAY,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;SACrC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AACrB,CAAC;AAED,SAAS,kBAAkB,CAAC,MAAW,EAAE,aAAuB;IAC5D,OAAO,CAAC,aAAa,kBAAmB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;WAC3D,CAAC,aAAa,mBAAoB,IAAI,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC;AAC7E,CAAC;AAED,SAAS,YAAY,CACjB,YAAiB,EACjB,cAA8B,EAC9B,UAAiC,EACjC,UAAkB,EAClB,YAA+B,EAC/B,aAA2B;IAE3B,IAAI,CAAC,CAAC,cAAc,YAAY,iBAAiB,CAAC,EAAE;QAChD,MAAM,IAAI,SAAS,CAAC,2BAAyB,UAAU,2DAAwD;cACzG,8CAA8C,CAAC,CAAC;KACzD;IACD,IAAM,aAAa,GAAG,cAAc,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAAC;IAChE,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE;QAClD,IAAM,YAAY,GAAG,aAAa,kBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;QACvE,YAAY,CAAC,eAAe,EAAE,CAC1B,IAAI,SAAS,CAAC,oBAAoB,CAAC,YAAY,EAAE,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAC1F,CAAC;QACF,OAAO,IAAI,GAAG,EAAY,CAAC;KAC9B;IAED,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;QACzB,YAAY,CAAC,eAAe,EAAE,CAC1B,IAAI,SAAS,CAAC,2BAAyB,UAAU,sCAAmC,CAAC,CACxF,CAAC;QACF,OAAO,IAAI,GAAG,EAAY,CAAC;KAC9B;IAED,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE;QAC3B,YAAY,CAAC,eAAe,EAAE,CAC1B,IAAI,SAAS,CAAC,2BAAyB,UAAU,wCAAqC,CAAC,CAC1F,CAAC;QACF,OAAO,IAAI,GAAG,EAAY,CAAC;KAC9B;IAED,IAAM,SAAS,GAAG,IAAI,GAAG,EAAY,CAAC;IAEtC,IAAI,aAAa,mBAAoB,EAAE;QACnC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,aAAG;YACjC,IAAI;gBACA,IAAM,SAAS,GAAG,YAAY,CAAC,kBAAkB,CAC7C,GAAG,EACH,cAAc,CAAC,OAAO,EACtB,UAAU,EACV,UAAU,EACV,aAAa,CAChB,CAAC;gBACF,IAAI,cAAc,CAAC,SAAS,CAAC,EAAE;oBAC3B,SAAS,CAAC,GAAG,CACT,SAAS,EACT,YAAY,CAAC,kBAAkB,CAC3B,YAAY,CAAC,GAAG,CAAC,EACjB,cAAc,CAAC,SAAS,EACxB,UAAU,EACP,UAAU,SAAI,SAAS,MAAG,EAC7B,aAAa,CAChB,CACJ,CAAC;iBACL;aACJ;YAAC,OAAO,CAAC,EAAE;gBACR,4DAA4D;gBAC5D,gDAAgD;gBAChD,YAAY,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;aACrC;QACL,CAAC,CAAC,CAAC;KACN;SAAM;QACH,YAAY,CAAC,OAAO,CAAC,UAAC,OAAY;YAC9B,IAAI;gBACA,IAAM,GAAG,GAAG,YAAY,CAAC,kBAAkB,CACvC,OAAO,CAAC,GAAG,EACX,cAAc,CAAC,OAAO,EACtB,UAAU,EACV,UAAU,EACV,aAAa,CAChB,CAAC;gBAEF,iDAAiD;gBACjD,IAAI,cAAc,CAAC,GAAG,CAAC,EAAE;oBACrB,SAAS,CAAC,GAAG,CACT,GAAG,EACH,YAAY,CAAC,kBAAkB,CAC3B,OAAO,CAAC,KAAK,EACb,cAAc,CAAC,SAAS,EACxB,UAAU,EACP,UAAU,SAAI,GAAG,MAAG,EACvB,aAAa,CAChB,CACJ,CAAC;iBACL;aACJ;YAAC,OAAO,CAAC,EAAE;gBACR,4DAA4D;gBAC5D,gDAAgD;gBAChD,YAAY,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;aACrC;QACL,CAAC,CAAC,CAAC;KACN;IAED,OAAO,SAAS,CAAC;AACrB,CAAC;AAED,SAAS,eAAe,CACpB,YAAoC,EACpC,cAA8B,EAC9B,UAAiC,EACjC,UAAkB;IAElB,2GAA2G;IAC3G,sDAAsD;IAEtD,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,CAAC,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC,EAAE;QAC5F,OAAO,IAAI,IAAI,CAAC,YAAmB,CAAC,CAAC;KACxC;SAAM,IAAI,YAAY,YAAY,IAAI,EAAE;QACrC,OAAO,YAAY,CAAC;KACvB;SAAM;QACH,sBAAsB,CAAC,MAAM,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC,CAAC;KACvG;AACL,CAAC;AAED,SAAS,mBAAmB,CACxB,YAAoC,EACpC,cAA8B,EAC9B,UAAiC,EACjC,UAAkB;IAElB,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;QAClC,sBAAsB,CAAC,aAAa,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC,CAAC;KAC3G;IACD,OAAO,2BAA2B,CAAC,YAAY,CAAC,CAAC;AACrD,CAAC;AAED,SAAS,gBAAgB,CACrB,YAAoC,EACpC,cAA8B,EAC9B,UAAiC,EACjC,UAAkB;IAElB,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;QAClC,sBAAsB,CAAC,UAAU,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC,CAAC;KACxG;IACD,OAAO,IAAI,QAAQ,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC,CAAC;AACnE,CAAC;AAED,SAAS,2BAA2B,CAAC,KAAa;IAC9C,IAAM,GAAG,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,wBAAwB;IACvE,IAAM,OAAO,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;IAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QACpD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KACpC;IAED,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,mBAAmB,CACxB,YAAoC,EACpC,cAA8B,EAC9B,UAAiC,EACjC,UAAkB;IAElB,IAAM,WAAW,GAAG,cAAc,CAAC,IAAsB,CAAC;IAC1D,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,cAAI,IAAI,QAAC,KAAK,CAAC,IAAI,CAAC,EAAZ,CAAY,CAAC,EAAE;QACzE,OAAO,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC;KACxC;IACD,OAAO,sBAAsB,CACzB,WAAW,CAAC,IAAI,EAChB,wBAAwB,EACxB,mBAAmB,CAAC,YAAY,CAAC,EACjC,UAAU,CACb,CAAC;AACN,CAAC;AAED,SAAS,kBAAkB,CACvB,YAAoC,EACpC,cAA8B,EAC9B,UAAiC,EACjC,UAAkB;IAElB,IAAM,WAAW,GAAG,cAAc,CAAC,IAAsB,CAAC;IAC1D,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,cAAI,IAAI,QAAC,KAAK,CAAC,IAAI,CAAC,EAAZ,CAAY,CAAC,EAAE;QACzE,OAAO,IAAI,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,eAAK,IAAI,QAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC,CAAC;KAC9D;IACD,OAAO,sBAAsB,CACzB,cAAc,CAAC,IAAI,CAAC,IAAI,EACxB,wBAAwB,EACxB,mBAAmB,CAAC,YAAY,CAAC,EACjC,UAAU,CACb,CAAC;AACN,CAAC;;;ACpoBgG;AAC5C;AACS;AAMnC;AA0B3B;;;;GAIG;AACI,SAAS,eAAe,CAAC,kBAA6C,EAAE,OAAqC;IAArC,sCAAqC;IAChH,OAAO,UAAC,MAAc,EAAE,OAAwB;QAC5C,IAAM,aAAa,GAAG,yBAAuB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAI,MAAM,CAAC,OAAO,CAAG,CAAC,CAAC,sBAAsB;QAEpH,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE;YACjC,QAAQ,CAAI,aAAa,kEAA+D,CAAC,CAAC;YAC1F,OAAO;SACV;QAED,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;QAC7E,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,UAAU,GAAG,CAAC,EAAE;YACtC,QAAQ,CAAI,aAAa,8CAA2C,CAAC,CAAC;YACtE,OAAO;SACV;QAED,0GAA0G;QAC1G,IAAI,0BAA0B,IAAI,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC,KAAK,KAAK,EAAE;YAC7F,QAAQ,CAAI,aAAa,oCAA+B,wBAA0B,CAAC,CAAC;YACpF,OAAO;SACV;QAED,yBAAyB,CAAC,MAAM,EAAE,OAAO,EAAE;YACvC,IAAI,EAAE,eAAe,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,EAAE,UAAU,CAAC;YAC3E,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC;YACnC,GAAG,EAAE,OAAO,CAAC,QAAQ,EAAE;YACvB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,QAAQ,EAAE;YACxC,YAAY,EAAE,OAAO,CAAC,YAAY;YAClC,UAAU,EAAE,OAAO,CAAC,UAAU;SACjC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAEM,SAAS,eAAe,CAAC,WAA2B,EAAE,UAAkB;IAC3E,IAAI,IAAI,GAAG,IAAI,mBAAmB,CAAC,WAAW,CAAC,CAAC;IAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;QACjC,IAAI,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC;KACxC;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;;;;;;;;;;;;;;ACzEkB;AAC4C;AACU;AAQ9C;AAGpB,SAAS,kBAAkB,CAC9B,YAA2B,EAC3B,YAA2B,EAC3B,kBAA4B,EAC5B,kBAAuC;IAEvC,8FAA8F;IAC9F,8FAA8F;IAC9F,iGAAiG;IACjG,IAAI,YAAY,CAAC,WAAW,KAAK,kBAAkB,EAAE;QACjD,YAAY,CAAC,MAAM,GAAG,kBAAkB,IAAI,kBAAkB,CAAC,IAAI;YAC/D,CAAC,CAAC,kBAAkB,CAAC,IAAI;YACzB,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;KAC1C;AACL,CAAC;AAiBD;;;;;;;;;GASG;AACH;IAAA;QAEY,oBAAe,GAAoB,kBAAkB,CAAC;QACtD,iBAAY,GAA2B,QAAQ,CAAC;QAChD,0BAAqB,GAAG,IAAI,GAAG,CAA4D;YAC/F,aAAa;YACb,CAAC,IAAI,EAAE,QAAQ,CAAC;YAChB,CAAC,MAAM,EAAE,QAAQ,CAAC;YAClB,CAAC,MAAM,EAAE,QAAQ,CAAC;YAClB,CAAC,OAAO,EAAE,QAAQ,CAAC;YAEnB,CAAC,WAAW,EAAE,oBAAoB,CAAC;YACnC,CAAC,QAAQ,EAAE,iBAAiB,CAAC;YAE7B,CAAC,KAAK,EAAE,yBAAc,CAAC;YACvB,CAAC,GAAG,EAAE,uBAAY,CAAC;YACnB,CAAC,GAAG,EAAE,uBAAY,CAAC;YAEnB,eAAe;YACf,CAAC,YAAY,EAAE,mBAAmB,CAAC;YACnC,CAAC,YAAY,EAAE,mBAAmB,CAAC;YACnC,CAAC,SAAS,EAAE,mBAAmB,CAAC;YAChC,CAAC,UAAU,EAAE,mBAAmB,CAAC;YACjC,CAAC,iBAAiB,EAAE,mBAAmB,CAAC;YACxC,CAAC,UAAU,EAAE,mBAAmB,CAAC;YACjC,CAAC,WAAW,EAAE,mBAAmB,CAAC;YAClC,CAAC,UAAU,EAAE,mBAAmB,CAAC;YACjC,CAAC,WAAW,EAAE,mBAAmB,CAAC;SACrC,CAAC,CAAC;IAqEP,CAAC;IAnEG,uCAAkB,GAAlB,UAAmB,mBAAoC;QACnD,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE;YAC3C,MAAM,IAAI,SAAS,CAAC,4CAA4C,CAAC,CAAC;SACrE;QAED,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC;IAC/C,CAAC;IAED,uCAAkB,GAAlB;QACI,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,oCAAe,GAAf,UAAgB,oBAA4C;QACxD,IAAI,OAAO,oBAAoB,KAAK,UAAU,EAAE;YAC5C,MAAM,IAAI,SAAS,CAAC,6CAA6C,CAAC,CAAC;SACtE;QAED,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;IAC7C,CAAC;IAED,oCAAe,GAAf;QACI,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,yCAAoB,GAApB,UAAqB,aAA2B;QAC5C,OAAO,cAAc,CAAC,cAAc,EAAE,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC;IACrF,CAAC;IAED;;;OAGG;IACH,uCAAkB,GAAlB,UACI,YAAiB,EACjB,cAA8B,EAC9B,UAA6B,EAC7B,aAA2B;QAD3B,kDAA6B;QAG7B,IAAI,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,YAAY,KAAK,IAAI,EAAE;YAC/E,OAAO,IAAI,CAAC;SACX;QACO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;YAC3C,OAAO;SACN;QAEO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,cAAc,CAAC,IAAI,CAAC,EAAE;YAClD,IAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YACjD,IAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAEpD,IAAI,CAAC,YAAY,CAAC,IAAI,SAAS,CAC3B,0BAAwB,UAAU,qBAAgB,YAAY,gBAAW,UAAU,OAAI,CACtG,CAAC,CAAC;YACS,OAAO;SACV;QAED,IAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACvE,IAAI,UAAU,EAAE;YACZ,OAAO,UAAU,CAAC,YAAY,EAAE,cAAc,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;SACpF;QACD,uEAAuE;QACvE,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;YAClC,OAAO,0BAAe,CAAC,YAAY,EAAE,cAAc,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;SACzF;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,SAAS,CAC3B,0BAAwB,UAAU,+CAA4C,CACzF,CAAC,CAAC;IACC,CAAC;IACL,iBAAC;AAAD,CAAC;;AAED;;;GAGG;AACH,SAAS,0BAAe,CACpB,YAA2B,EAC3B,cAAsC,EACtC,UAAkB,EAClB,UAAsB,EACtB,aAA2B;IAE3B,IAAI,kBAAkD,CAAC;IACvD,IAAI,YAA2B,CAAC;IAChC,IAAI,eAAe,GAAG,UAAU,CAAC,kBAAkB,EAAE,CAAC;IAEtD,IAAI,YAAY,CAAC,WAAW,KAAK,cAAc,CAAC,IAAI,IAAI,YAAY,YAAY,cAAc,CAAC,IAAI,EAAE;QACjG,4EAA4E;QAC5E,oFAAoF;QACpF,kBAAkB,GAAG,2BAAkB,CAAC,kBAAkB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;KACxF;SAAM;QACH,kBAAkB,GAAG,2BAAkB,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KACnF;IAED,IAAI,kBAAkB,EAAE;QACpB,IAAI,kBAAkB,CAAC,6BAA6B,EAAE;YAClD,yBAAyB;YACzB,IAAI,OAAQ,YAAoB,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,KAAK,UAAU,EAAE;gBAC9F,YAAoB,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,EAAE,CAAC;aAC7E;YACD,mBAAmB;iBACd,IAAI,OAAQ,YAAY,CAAC,WAAmB,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,KAAK,UAAU,EAAE;gBAC/G,YAAY,CAAC,WAAmB,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,EAAE,CAAC;aACzF;iBAAM;gBACH,UAAU,CAAC,eAAe,EAAE,CAAC,IAAI,SAAS,CACtC,mCAAiC,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC,SAAI,kBAAkB,CAAC,6BAA6B,uBAAoB,CAChJ,CAAC,CAAC;aACN;SACJ;QAED,IAAM,YAAU,GAAG,kBAAkB,CAAC;QACtC,wCAAwC;QACxC,uGAAuG;QACvG,yGAAyG;QACzG,2DAA2D;QAC3D,YAAY,GAAG,EAAE,CAAC;QAElB,IAAM,cAAY,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,EAAE,YAAU,CAAC,OAAO,CAAC,CAAC;QAC1E,IAAI,YAAU,CAAC,eAAe,EAAE;YAC5B,eAAe,GAAG,YAAU,CAAC,eAAe,CAAC;SAChD;QAED,YAAU,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,iBAAiB;YAC7C,IAAM,gBAAgB,GAAG,YAAY,CAAC,cAAY,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC/E,IAAI,UAAU,CAAC;YACf,IAAI,iBAAiB,CAAC,UAAU,EAAE;gBAC9B,UAAU,GAAG,iBAAiB,CAAC,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;aAClF;iBAAM,IAAI,iBAAiB,CAAC,IAAI,EAAE;gBAC/B,UAAU,GAAG,UAAU,CAAC,kBAAkB,CACtC,YAAY,CAAC,iBAAiB,CAAC,GAAG,CAAC,EACnC,iBAAiB,CAAC,IAAI,EACnB,MAAM,CAAC,YAAU,CAAC,SAAS,CAAC,SAAI,iBAAiB,CAAC,GAAK,EAC1D,gBAAgB,CACnB,CAAC;aACL;iBAAM;gBACH,MAAM,IAAI,SAAS,CACf,yBAAuB,iBAAiB,CAAC,IAAI,eAAY;sBACvD,oDAAoD,CACzD,CAAC;aACL;YAED,IAAI,cAAc,CAAC,UAAU,CAAC;mBACvB,CAAC,UAAU,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,IAAI,UAAU,KAAK,IAAI,CAAC,EAC/E;gBACE,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;aACrD;QACL,CAAC,CAAC,CAAC;KACN;SAAM;QACH,iEAAiE;QACjE,gHAAgH;QAChH,0BAA0B;QAC1B,YAAY,GAAG,sBAAI,YAAY,CAAC,CAAC;KACpC;IAED,iBAAiB;IACjB,eAAe,CAAC,YAAY,EAAE,YAAY,EAAE,cAAc,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;IAErF,OAAO,YAAY,CAAC;AACxB,CAAC;AAED;;;GAGG;AACH,SAAS,yBAAc,CACnB,YAAwB,EACxB,cAA8B,EAC9B,UAAkB,EAClB,UAAsB,EACtB,aAA2B;IAE3B,IAAI,CAAC,CAAC,cAAc,YAAY,mBAAmB,CAAC,EAAE;QAClD,MAAM,IAAI,SAAS,CAAC,yBAAuB,UAAU,6DAA0D;cACzG,8CAA8C,CAAC,CAAC;KACzD;IACD,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;QAC7B,MAAM,IAAI,SAAS,CAAC,yBAAuB,UAAU,gDAA6C,CAAC,CAAC;KACvG;IAED,gDAAgD;IAChD,4FAA4F;IAC5F,+FAA+F;IAC/F,8FAA8F;IAC9F,qBAAqB;IACrB,YAAY,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,CAAC,UAAU,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,OAAO,KAAK,IAAI,CAAC;eAClE,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,EAC5D;YACE,IAAM,gBAAgB,GAAG,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACjE,IAAM,cAAc,GAAG,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC9D,MAAM,IAAI,SAAS,CAAC,yBAAuB,UAAU,SAAI,CAAC,OAAI;mBACxD,gBAAc,gBAAgB,gBAAW,cAAc,OAAI,EAAC,CAAC;SACtE;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,UAAU,EAAE;QACZ,+BAA+B;QAC/B,UAAU,IAAI,IAAI,CAAC;KACtB;IAED,OAAO,YAAY,CAAC,GAAG,CACnB,iBAAO,IAAI,iBAAU,CAAC,kBAAkB,CAAC,OAAO,EAAE,cAAc,CAAC,WAAW,EAAE,UAAU,EAAE,aAAa,CAAC,EAA7F,CAA6F,CAC3G,CAAC;AACN,CAAC;AAED;;;;GAIG;AACH,SAAS,uBAAY,CACjB,YAAsB,EACtB,cAA8B,EAC9B,UAAkB,EAClB,UAAsB,EACtB,aAA2B;IAE3B,IAAI,CAAC,CAAC,cAAc,YAAY,iBAAiB,CAAC,EAAE;QAChD,MAAM,IAAI,SAAS,CAAC,yBAAuB,UAAU,2DAAwD;cACvG,8CAA8C,CAAC,CAAC;KACzD;IACD,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;QAC7B,MAAM,IAAI,SAAS,CAAC,yBAAuB,UAAU,8CAA2C,CAAC,CAAC;KACrG;IAED,oCAAoC;IACpC,IAAI,UAAU,EAAE;QACZ,UAAU,IAAI,IAAI,CAAC;KACtB;IAED,IAAM,WAAW,GAAe,EAAE,CAAC;IAEnC,oEAAoE;IACpE,gGAAgG;IAChG,+BAA+B;IAC/B,YAAY,CAAC,OAAO,CAAC,iBAAO;QACxB,IAAM,aAAa,GAAG,UAAU,CAAC,kBAAkB,CAAC,OAAO,EAAE,cAAc,CAAC,WAAW,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;QAEpH,0FAA0F;QAC1F,+FAA+F;QAC/F,wDAAwD;QACxD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,cAAc,CAAC,aAAa,CAAC,EAAE;YAC3D,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACnC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,WAAW,CAAC;AACvB,CAAC;AAED;;;GAGG;AACH,SAAS,uBAAY,CACjB,YAA2B,EAC3B,cAA8B,EAC9B,UAAkB,EAClB,UAAsB,EACtB,aAA2B;IAE3B,IAAI,CAAC,CAAC,cAAc,YAAY,iBAAiB,CAAC,EAAE;QAChD,MAAM,IAAI,SAAS,CAAC,yBAAuB,UAAU,2DAAwD;cACvG,8CAA8C,CAAC,CAAC;KACzD;IACD,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,yBAAuB,UAAU,4CAAyC,CAAC,CAAC;KACnG;IAED,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;QACzB,MAAM,IAAI,SAAS,CAAC,yBAAuB,UAAU,0CAAuC,CAAC,CAAC;KACjG;IAED,IAAI,UAAU,EAAE;QACZ,UAAU,IAAI,IAAI,CAAC;KACtB;IAED,2DAA2D;IAC3D,IAAM,WAAW,GAAG,cAAc,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAAC;IAC9D,IAAM,MAAM,GAAG,WAAW,mBAAoB,CAAC,CAAC,CAAE,EAAoB,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5E,IAAM,YAAY,GAAG,UAAU,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;IAEpE,+FAA+F;IAC/F,YAAY,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;QAC5B,IAAM,qBAAqB,GAAG;YAC1B,GAAG,EAAE,UAAU,CAAC,kBAAkB,CAAC,GAAG,EAAE,cAAc,CAAC,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC;YAC1F,KAAK,EAAE,UAAU,CAAC,kBAAkB,CAAC,KAAK,EAAE,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,aAAa,CAAC;SACnG,CAAC;QAEF,4EAA4E;QAC5E,IAAM,UAAU,GAAG,cAAc,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QAC7D,IAAM,YAAY,GAAG,cAAc,CAAC,qBAAqB,CAAC,KAAK,CAAC;eACzD,CAAC,qBAAqB,CAAC,KAAK,KAAK,IAAI,IAAI,YAAY,CAAC,CAAC;QAC9D,IAAI,UAAU,IAAI,YAAY,EAAE;YAC5B,IAAI,WAAW,mBAAoB,EAAE;gBACjC,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,qBAAqB,CAAC,KAAK,CAAC;aACnE;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;aACtC;SACJ;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;;;GAIG;AACH,SAAS,mBAAmB,CAAC,YAA6B;IACtD,OAAO,KAAK,CAAC,IAAI,CAAC,YAAmB,CAAC,CAAC;AAC3C,CAAC;AAED;;GAEG;AACH,SAAS,oBAAoB,CAAC,MAAmB;IAC7C,6EAA6E;IAC7E,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,kBAAQ,IAAI,aAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,EAA7B,CAA6B,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACvG,CAAC;AAED;;;GAGG;AACH,SAAS,iBAAiB,CAAC,QAAkB;IACzC,OAAO,oBAAoB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACjD,CAAC;;;;;;;;;;;;;;AC/Z0E;AACO;AACpB;AACyB;AACf;AACF;AACO;AAI5B;AAuCjD;IA6JI;;;;;OAKG;IACH,mBAAY,eAAgC,EAAE,QAA6B;QAjB3E,aAAa;QAEL,eAAU,GAAe,IAAI,qBAAU,EAAE,CAAC;QAC1C,iBAAY,GAAoB,IAAI,yBAAY,EAAK,CAAC;QACtD,qBAAgB,GAA4B,EAAE,CAAC;QAC/C,WAAM,GAAW,CAAC,CAAC;QAavB,IAAM,YAAY,GAAG,2BAAkB,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;QAE5E,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,YAAY,CAAC,kBAAkB,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,EAAE;YACjG,MAAM,IAAI,SAAS,CAAC,wEAAwE,CAAC,CAAC;SACjG;QAED,IAAI,CAAC,YAAY,GAAG,UAAC,IAAI,IAAK,aAAM,CAAC,IAAI,CAAC,EAAZ,CAAY,CAAC;QAC3C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,UAAC,KAAK,IAAK,eAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC;QAE/C,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SACzB;aAAM,IAAI,SAAS,CAAC,aAAa,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SACnB;IACL,CAAC;IAlLD,iBAAiB;IACV,eAAK,GAAZ,UAAgB,MAAW,EAAE,QAAyB,EAAE,QAA6B;QACjF,OAAO,IAAI,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC3D,CAAC;IAgCM,sBAAY,GAAnB,UACI,MAAW,EACX,WAA4B,EAC5B,QAA6B,EAC7B,UAAmB;QAEnB,OAAO,IAAI,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,UAAiB,CAAC,CAAC;IACxF,CAAC;IAEM,oBAAU,GAAjB,UAAqB,MAAW,EAAE,WAA4B,EAAE,QAA6B;QACzF,OAAO,IAAI,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;IAEM,oBAAU,GAAjB,UACI,MAAW,EACX,OAAwB,EACxB,SAA0B,EAC1B,QAA6B;QAE7B,OAAO,IAAI,SAAS,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAEM,qBAAW,GAAlB,UAAsB,MAAS,EAAE,QAAyB,EAAE,QAA6B;QACrF,OAAO,IAAI,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACjE,CAAC;IAoBM,sBAAY,GAAnB,UAAuB,MAAkB,EAAE,WAA4B,EAAE,UAAgB,EAAE,QAA6B;QACpH,OAAO,IAAI,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACjF,CAAC;IAEM,oBAAU,GAAjB,UAAqB,MAAc,EAAE,WAA4B,EAAE,QAA6B;QAC5F,OAAO,IAAI,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;IAEM,oBAAU,GAAjB,UACI,MAAiB,EACjB,OAAwB,EACxB,SAA0B,EAC1B,QAA6B;QAE7B,OAAO,IAAI,SAAS,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAEM,mBAAS,GAAhB,UAAoB,MAAS,EAAE,QAAyB,EAAE,QAA6B;QACnF,OAAO,IAAI,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC/D,CAAC;IAoBM,0BAAgB,GAAvB,UAA2B,MAAkB,EAAE,WAA4B,EAAE,UAAgB,EAAE,QAA6B;QACxH,OAAO,IAAI,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACrF,CAAC;IAEM,wBAAc,GAArB,UAAyB,MAAc,EAAE,WAA4B,EAAE,QAA6B;QAChG,OAAO,IAAI,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IACvE,CAAC;IAEM,wBAAc,GAArB,UACI,MAAiB,EACjB,OAAwB,EACxB,SAA0B,EAC1B,QAA6B;QAE7B,OAAO,IAAI,SAAS,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC9E,CAAC;IAIM,yBAAe,GAAtB,UAAuB,MAA0B;QAC7C,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;SAC7C;aAAM;YACH,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;SAC/B;IACL,CAAC;IAqCD;;;OAGG;IACH,0BAAM,GAAN,UAAO,QAA4B;QAC/B,IAAI,SAAS,CAAC,aAAa,EAAE;YACzB,QAAQ,GAAG,gCACJ,SAAS,CAAC,aAAa,GACvB,QAAQ,CACd,CAAC;YAEF,IAAI,QAAQ,CAAC,UAAU,IAAI,SAAS,CAAC,aAAa,CAAC,UAAU,EAAE;gBAC3D,wEAAwE;gBACxE,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CACpC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CACjE,CAAC,CAAC;aACN;SACJ;QAED,IAAM,OAAO,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,OAAO,CAAC;QAEpC,IAAI,QAAQ,CAAC,YAAY,EAAE;YACvB,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;YAC1C,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YACzD,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;SAC1D;QAED,IAAI,QAAQ,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;SACjC;QACO,IAAI,QAAQ,CAAC,YAAY,EAAE;YACnC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;SACxD;QACO,IAAI,QAAQ,CAAC,eAAe,EAAE;YACtC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;SAC5D;QACO,IAAI,QAAQ,CAAC,MAAM,EAAE;YAC7B,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;SAC7B;QAEO,IAAI,QAAQ,CAAC,YAAY,EAAE;YACvB,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;YAC1C,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YACzD,sBAAsB;SACzB;QAED,IAAI,QAAQ,CAAC,UAAU,EAAE;YACrB,iEAAiE;YACjE,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS,EAAE,CAAC;gBACrC,2CAA2C;gBAC3C,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,KAAK,IAAI,EAAE;oBACxD,UAAU,CACN,8EAA4E,CAAC,OAAI,CACxG,CAAC;iBACe;YACL,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,UAAU,CAAC;SAC/C;IACL,CAAC;IAED;;;;;OAKG;IACH,yBAAK,GAAL,UAAM,MAAW;QAAjB,iBA4BC;QA3BG,IAAM,IAAI,GAAG,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAE3D,IAAM,YAAY,GAAG,2BAAkB,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACjF,IAAI,MAAqB,CAAC;QAC1B,IAAM,UAAU,GAAG,IAAI,GAAG,EAAoB,CAAC;QAE/C,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC,OAAO,CAAC,uBAAa;YAC1D,UAAU,CAAC,GAAG,CAAC,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,aAAa,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,IAAI,YAAY,EAAE;YACd,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAa;gBACzC,UAAU,CAAC,GAAG,CAAC,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,aAAa,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;SACN;QAED,IAAI;YACA,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CACzC,IAAI,EACJ,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,EAC1C,UAAU,CACR,CAAC;SACV;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;SACxB;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAQD,gCAAY,GAAZ,UAAa,MAAW,EAAE,UAAsB;QAAtB,2CAAsB;QAC5C,IAAM,IAAI,GAAG,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,CACnD,IAAI,EACQ,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,UAAU,CAAC,EACvE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAC7C,CAAC;IACN,CAAC;IAED,8BAAU,GAAV,UAAW,MAAW;QAClB,IAAM,IAAI,GAAG,eAAe,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,CACnD,IAAI,EACQ,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAC7C,CAAC;IACN,CAAC;IAED,8BAAU,GAAV,UAAc,MAAW,EAAE,cAA+B;QACtD,IAAM,IAAI,GAAG,eAAe,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,CACvC,IAAI,EACJ,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,EAC1C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAC7C,CAAC;IACN,CAAC;IAED;;;;OAIG;IACH,+BAAW,GAAX,UAAY,MAAS;QACjB,IAAI;YACA,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CACrC,MAAM,EACN,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAC7C,CAAC;SACL;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;SACxB;IACL,CAAC;IAOD,gCAAY,GAAZ,UAAa,MAAkB,EAAE,UAAiC;QAAjC,2CAAiC;QAC9D,IAAI;YACA,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,MAAM,EAAE,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;SAC9H;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;SACxB;IACL,CAAC;IAED,8BAAU,GAAV,UAAW,MAAc;QACrB,IAAI;YACA,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;SACjF;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;SACxB;IACL,CAAC;IAED,8BAAU,GAAV,UAAc,MAAiB,EAAE,cAA+B;QAC5D,IAAI;YACA,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;SACjG;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;SACxB;IACL,CAAC;IAED;;;;;;OAMG;IACH,6BAAS,GAAT,UAAU,MAAS;QACf,IAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,MAAM,KAAK,SAAS,EAAE;YACtB,OAAO,EAAE,CAAC;SACb;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC;IAOD,oCAAgB,GAAhB,UAAiB,MAAkB,EAAE,UAAe;QAChD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7F,CAAC;IAED,kCAAc,GAAd,UAAe,MAAc;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/E,CAAC;IAED,kCAAc,GAAd,UAAkB,MAAiB,EAAE,cAA+B;QAChE,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/F,CAAC;IAEO,kCAAc,GAAtB,UAAuB,YAAqC;QAA5D,iBAMC;QALG,IAAM,GAAG,GAAG,IAAI,GAAG,EAA4B,CAAC;QAEhD,YAAY,CAAC,MAAM,CAAC,cAAI,IAAI,WAAI,EAAJ,CAAI,CAAC,CAAC,OAAO,CAAC,cAAI,IAAI,UAAG,CAAC,GAAG,CAAC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,EAAtC,CAAsC,CAAC,CAAC;QAE1F,OAAO,GAAG,CAAC;IACf,CAAC;IACL,gBAAC;AAAD,CAAC;;;;AC9b4E;AACf;AA8EvD,SAAS,UAAU,CAAmB,eAAyD;IAClG,IAAI,OAA8B,CAAC;IAEnC,IAAI,OAAO,eAAe,KAAK,UAAU,EAAE;QACvC,qDAAqD;QACrD,OAAO,GAAG,EAAE,CAAC;KAChB;SAAM;QACH,mDAAmD;QACnD,OAAO,GAAG,eAAe,IAAI,EAAE,CAAC;KACnC;IAED,SAAS,SAAS,CACd,MAAuB;QAEvB,8CAA8C;QAC9C,IAAM,cAAc,GAAG,2BAAkB,CAAC,wBAAwB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAErF,2BAA2B;QAC3B,cAAc,CAAC,kBAAkB,GAAG,IAAI,CAAC;QACzC,cAAc,CAAC,wBAAwB,GAAG,OAAO,CAAC,cAAc,CAAC;QACjE,cAAc,CAAC,6BAA6B,GAAG,OAAO,CAAC,mBAAmB,CAAC;QAE3E,IAAI,OAAO,CAAC,YAAY,EAAE;YACtB,cAAc,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;SACtD;QACD,IAAI,OAAO,CAAC,eAAe,EAAE;YACzB,cAAc,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;SAC5D;QAED,gCAAgC;QAChC,cAAc,CAAC,mBAAmB,GAAG,OAAO,CAAC,WAAkB,CAAC;QAChE,IAAI,OAAO,CAAC,IAAI,EAAE;YACd,cAAc,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;SACtC;QACD,IAAM,WAAW,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACb,cAAc,CAAC,OAAO,GAAG,WAAW,CAAC;SACxC;QAED,IAAI,OAAO,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,UAAU;iBACb,MAAM,CAAC,mBAAS,IAAI,cAAO,CAAC,SAAS,CAAC,EAAlB,CAAkB,CAAC;iBACvC,OAAO,CAAC,mBAAS,IAAI,qBAAc,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAxC,CAAwC,CAAC,CAAC;SACvE;IACL,CAAC;IAED,IAAI,OAAO,eAAe,KAAK,UAAU,EAAE;QACvC,qDAAqD;QACrD,SAAS,CAAC,eAAe,CAAC,CAAC;KAC9B;SAAM;QACH,mDAAmD;QACnD,OAAO,SAAS,CAAC;KACpB;AACL,CAAC;AAED,SAAS,UAAU,CAAI,MAAuB;IAC1C,OAAO;AACX,CAAC;;;ACtIkB;AACkC;AACS;AAOnC;AA4CpB,SAAS,UAAU,CACtB,kBAAuD,EACvD,OAAyB;IAEzB,IAAI,OAAO,IAAI,CAAC,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,KAAK,QAAQ,CAAC,EAAE;QACzE,IAAM,SAAS,GAAG,kBAAmC,CAAC;QACtD,sBAAsB;QACtB,IAAM,aAAa,GAAG,oBAAkB,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,SAAI,MAAM,CAAC,OAAO,CAAG,CAAC;QAE3F,qGAAqG;QACrG,yDAAyD;QACzD,IAAI,0BAA0B,EAAE;YAC5B,IAAM,eAAe,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,SAAS,EAAE,OAAO,CAAa,CAAC;YAE3F,IAAI,CAAC,eAAe,EAAE;gBAClB,QAAQ,CAAI,aAAa,sEAAiE,wBAA0B,CAAC,CAAC;gBACtH,OAAO;aACV;YAED,IAAM,cAAc,GAAG,oBAAoB,CAAC,eAAe,CAAC,CAAC;YAC7D,IAAI,qBAAqB,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE;gBACtD,OAAO;aACV;YAED,yBAAyB,CAAC,SAAS,EAAE,OAAO,EAAE;gBAC1C,IAAI,EAAE,cAAc;gBACpB,GAAG,EAAE,OAAO,CAAC,QAAQ,EAAE;gBACvB,IAAI,EAAE,OAAO,CAAC,QAAQ,EAAE;aAC3B,CAAC,CAAC;SACN;aAAM;YACH,QAAQ,CAAI,aAAa,6EAA0E,CAAC,CAAC;YACrG,OAAO;SACV;KACJ;SAAM;QACH,0CAA0C;QAC1C,OAAO,UAAC,MAAc,EAAE,QAAyB;YAC7C,IAAM,OAAO,GAAuB,kBAAwC,IAAI,EAAE,CAAC;YACnF,IAAI,cAA0C,CAAC;YAC/C,IAAM,aAAa,GAAG,oBAAkB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAI,MAAM,CAAC,QAAQ,CAAG,CAAC,CAAC,sBAAsB;YAEhH,IAAI,OAAO,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;gBACvC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;oBACtC,QAAQ,CAAI,aAAa,gEAA6D,CAAC,CAAC;oBACxF,OAAO;iBACV;gBAED,2IAA2I;gBAC3I,cAAc,GAAG,oBAAoB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBAC3D,IAAI,0BAA0B,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,EAAE;oBACvH,UAAU,CAAI,aAAa,kEAA+D,CAAC,CAAC;iBAC/F;aACJ;iBAAM;gBACH,wDAAwD;gBACxD,IAAI,0BAA0B,EAAE;oBAC5B,IAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,QAAQ,CAAa,CAAC;oBAErF,IAAI,CAAC,WAAW,EAAE;wBACd,QAAQ,CAAI,aAAa,+DAA4D,CAAC,CAAC;wBACvF,OAAO;qBACV;oBACD,cAAc,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;iBACtD;qBAAM,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;oBAC9B,QAAQ,CAAI,aAAa,6EAA0E,CAAC,CAAC;oBACrG,OAAO;iBACV;aACJ;YAED,IAAI,cAAc,IAAI,qBAAqB,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE;gBACxE,OAAO;aACV;YACD,yBAAyB,CAAC,MAAM,EAAE,QAAQ,EAAE;gBACxC,IAAI,EAAE,cAAc;gBACpB,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;gBAC1C,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC;gBACnC,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE;gBACxB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,QAAQ,CAAC,QAAQ,EAAE;gBACzC,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,UAAU,EAAE,OAAO,CAAC,UAAU;aACjC,CAAC,CAAC;QACP,CAAC,CAAC;KACL;AACL,CAAC;AAED,SAAS,qBAAqB,CAAC,aAAqB,EAAE,cAA8B;IAChF,IAAI,CAAC,CAAC,cAAc,YAAY,mBAAmB,CAAC,IAAI,cAAc,CAAC,IAAI,KAAK,KAAK,EAAE;QACnF,QAAQ,CAAI,aAAa,iEAA8D;cACjF,2BAA2B,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;KACf;IAED,IAAI,CAAC,CAAC,cAAc,YAAY,iBAAiB,CAAC,IAAI,cAAc,CAAC,IAAI,KAAK,GAAG,EAAE;QAC/E,QAAQ,CAAI,aAAa,4DAAyD;cAC5E,2BAA2B,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;KACf;IAED,IAAI,CAAC,CAAC,cAAc,YAAY,iBAAiB,CAAC,IAAI,cAAc,CAAC,IAAI,KAAK,GAAG,EAAE;QAC/E,QAAQ,CAAI,aAAa,4DAAyD;cAC5E,2BAA2B,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;KACf;IAED,OAAO,KAAK,CAAC;AACjB,CAAC;;;AC/JgG;AAC5C;AACS;AACX;AAuBnD;;;;;GAKG;AACI,SAAS,aAAa,CAAC,kBAA4B,EAAE,OAAmC;IAAnC,sCAAmC;IAC3F,OAAO,UAAC,MAAc,EAAE,OAAwB;QAC5C,IAAM,aAAa,GAAG,uBAAqB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAI,MAAM,CAAC,OAAO,CAAG,CAAC,CAAC,sBAAsB;QAElH,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE;YACjC,QAAQ,CAAI,aAAa,gEAA6D,CAAC,CAAC;YACxF,OAAO;SACV;QAED,kHAAkH;QAClH,IAAI,0BAA0B,IAAI,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC,KAAK,GAAG,EAAE;YAC3F,QAAQ,CAAI,aAAa,iCAA4B,wBAA0B,CAAC,CAAC;YACjF,OAAO;SACV;QAED,yBAAyB,CAAC,MAAM,EAAE,OAAO,EAAE;YACvC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC;YAC9B,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC;YACnC,GAAG,EAAE,OAAO,CAAC,QAAQ,EAAE;YACvB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,QAAQ,EAAE;YACxC,YAAY,EAAE,OAAO,CAAC,YAAY;YAClC,UAAU,EAAE,OAAO,CAAC,UAAU;SACjC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;;;AC1DgG;AAC5C;AACS;AACiB;AAuB/E;;;;;;GAMG;AACI,SAAS,aAAa,CACzB,cAAyC,EACzC,gBAA2C,EAC3C,OAAmC;IAAnC,sCAAmC;IAEnC,OAAO,UAAC,MAAc,EAAE,OAAwB;QAC5C,IAAM,aAAa,GAAG,uBAAqB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAI,MAAM,CAAC,OAAO,CAAG,CAAC,CAAC,sBAAsB;QAElH,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE;YAC7B,QAAQ,CAAI,aAAa,4DAAyD,CAAC,CAAC;YACpF,OAAO;SACV;QAED,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;YAC/B,QAAQ,CAAI,aAAa,8DAA2D,CAAC,CAAC;YACtF,OAAO;SACV;QAED,kHAAkH;QAClH,IAAI,0BAA0B,IAAI,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC,KAAK,GAAG,EAAE;YAC3F,QAAQ,CAAI,aAAa,iCAA4B,wBAA0B,CAAC,CAAC;YACjF,OAAO;SACV;QAED,yBAAyB,CAAC,MAAM,EAAE,OAAO,EAAE;YACvC,IAAI,EAAE,IAAI,CAAC,cAAc,EAAE,gBAAgB,EAAE,EAAC,KAAK,EAAE,OAAO,CAAC,KAAK,EAAC,CAAC;YACpE,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC;YACnC,GAAG,EAAE,OAAO,CAAC,QAAQ,EAAE;YACvB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,QAAQ,EAAE;YACxC,YAAY,EAAE,OAAO,CAAC,YAAY;YAClC,UAAU,EAAE,OAAO,CAAC,UAAU;SACjC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;;;ACpEmC;AAyB7B,SAAS,MAAM,CAAmB,eAA0C;IAC/E,IAAI,OAAO,eAAe,KAAK,UAAU,EAAE;QACvC,gBAAgB;QAChB,eAAe,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;QACrC,OAAO;KACV;IACD,oBAAoB;IACpB,OAAO,UAAC,MAAgB;QACpB,eAAe,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IAC7C,CAAC,CAAC;AACN,CAAC;AAED,SAAS,eAAe,CAAmB,MAAgB,EAAE,OAAuB;IAChF,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;QAC/C,MAAM,IAAI,KAAK,CAAI,MAAM,CAAC,IAAI,iCAA8B,CAAC,CAAC;KACjE;IACD,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG;QACtB,OAAO,gBAAS,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC;IAChF,CAAC,CAAC;AACN,CAAC;;;AC5CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2G;AACpB;AACpC;AACA;AACW;AACJ;AACA;AACf;AACoB","file":"typedjson.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedjson\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedjson\"] = factory();\n\telse\n\t\troot[\"typedjson\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {Serializable} from './types';\n\ndeclare abstract class Reflect {\n    static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport const MISSING_REFLECT_CONF_MSG = 'Are you sure, that you have both \"experimentalDecorators\"'\n    + ' and \"emitDecoratorMetadata\" in your tsconfig.json?';\n\n/**\n * Determines whether the specified type is a type that can be passed on \"as-is\" into `JSON.stringify`.\n * Values of these types don't need special conversion.\n * @param type The constructor of the type (wrapper constructor for primitive types, e.g. `Number` for `number`).\n */\nexport function isDirectlySerializableNativeType(type: Function): boolean {\n    return Boolean(~[Date, Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isDirectlyDeserializableNativeType(type: Function): boolean {\n    return Boolean(~[Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isTypeTypedArray(type: Function): boolean {\n    return Boolean(~[Float32Array, Float64Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n        .indexOf(type as any));\n}\n\nexport function isObject(value: any): value is Object {\n    return typeof value === 'object';\n}\n\nfunction shouldOmitParseString(jsonStr: string, expectedType: Function): boolean {\n    const expectsTypesSerializedAsStrings = expectedType === String\n        || expectedType === ArrayBuffer\n        || expectedType === DataView;\n\n    const hasQuotes = jsonStr.length >= 2 && jsonStr[0] === '\"' && jsonStr[jsonStr.length - 1] === '\"';\n    const isInteger = /^\\d+$/.test(jsonStr.trim());\n\n    return (expectsTypesSerializedAsStrings && !hasQuotes) || ((!hasQuotes && !isInteger) && expectedType === Date);\n}\n\nexport function parseToJSObject<T>(json: any, expectedType: Serializable<T>): Object {\n    if (typeof json !== 'string' || shouldOmitParseString(json, expectedType)) {\n      return json;\n    }\n    return JSON.parse(json);\n}\n\n/**\n * Determines if 'A' is a sub-type of 'B' (or if 'A' equals 'B').\n * @param A The supposed derived type.\n * @param B The supposed base type.\n */\nexport function isSubtypeOf(A: Function, B: Function) {\n    return A === B || A.prototype instanceof B;\n}\n\nexport function logError(message?: any, ...optionalParams: Array<any>) {\n    if (typeof console === 'object' && typeof console.error === 'function') {\n        console.error(message, ...optionalParams);\n    } else if (typeof console === 'object' && typeof console.log === 'function') {\n        console.log(`ERROR: ${message}`, ...optionalParams);\n    }\n}\n\nexport function logMessage(message?: any, ...optionalParams: Array<any>) {\n    if (typeof console === 'object' && typeof console.log === 'function') {\n        console.log(message, ...optionalParams);\n    }\n}\n\nexport function logWarning(message?: any, ...optionalParams: Array<any>) {\n    if (typeof console === 'object' && typeof console.warn === 'function') {\n        console.warn(message, ...optionalParams);\n    } else if (typeof console === 'object' && typeof console.log === 'function') {\n        console.log(`WARNING: ${message}`, ...optionalParams);\n    }\n}\n\n/**\n * Checks if the value is considered defined (not undefined and not null).\n * @param value\n */\nexport function isValueDefined<T>(value: T): value is Exclude<T, undefined | null> {\n    return !(typeof value === 'undefined' || value === null);\n}\n\nexport function isInstanceOf<T>(value: any, constructor: Function): boolean {\n    if (typeof value === 'number') {\n        return constructor === Number;\n    } else if (typeof value === 'string') {\n        return constructor === String;\n    } else if (typeof value === 'boolean') {\n        return constructor === Boolean;\n    } else if (isObject(value)) {\n        return value instanceof constructor;\n    }\n\n    return false;\n}\n\nexport const isReflectMetadataSupported =\n    typeof Reflect === 'object' && typeof Reflect.getMetadata === 'function';\n\n/**\n * Gets the name of a function.\n * @param fn The function whose name to get.\n */\nexport function nameof(fn: Function & { name?: string }) {\n    if (typeof fn.name === 'string') {\n        return fn.name;\n    }\n    return 'undefined';\n}\n\nexport function identity<T>(arg: T): T {\n    return arg;\n}\n","import {isDirectlySerializableNativeType, isTypeTypedArray, logError, nameof} from './helpers';\nimport {OptionsBase} from './options-base';\nimport {TypeDescriptor} from './type-descriptor';\nimport {IndexedObject, Serializable} from './types';\n\nexport const METADATA_FIELD_KEY = '__typedJsonJsonObjectMetadataInformation__';\n\nexport type TypeResolver = (sourceObject: IndexedObject, knownTypes: Map<string, Function>) => Function | undefined | null;\nexport type TypeHintEmitter\n    = (\n        targetObject: IndexedObject,\n        sourceObject: IndexedObject,\n        expectedSourceType: Function,\n        sourceTypeMetadata?: JsonObjectMetadata,\n    ) => void;\n\nexport interface JsonMemberMetadata {\n    /** If set, a default value will be emitted for uninitialized members. */\n    emitDefaultValue?: boolean;\n\n    /** Member name as it appears in the serialized JSON. */\n    name: string;\n\n    /** Property or field key of the json member. */\n    key: string;\n\n    /** Type descriptor of the member. */\n    type?: TypeDescriptor;\n\n    /** If set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    options?: OptionsBase;\n\n    /** Custom deserializer to use. */\n    deserializer?: (json: any) => any;\n\n    /** Custom serializer to use. */\n    serializer?: (value: any) => any;\n}\n\nexport class JsonObjectMetadata {\n    // #region Static\n    /**\n     * Gets the name of a class as it appears in a serialized JSON string.\n     * @param ctor The constructor of a class (with or without jsonObject).\n     */\n    static getJsonObjectName(ctor: Function): string {\n        const metadata = JsonObjectMetadata.getFromConstructor(ctor);\n        return metadata ? nameof(metadata.classType) : nameof(ctor);\n    }\n\n    /**\n     * Gets jsonObject metadata information from a class.\n     * @param ctor The constructor class.\n     */\n    static getFromConstructor<T>(ctor: Serializable<T>): JsonObjectMetadata | undefined {\n        const prototype = ctor.prototype;\n        if (!prototype) {\n            return;\n        }\n\n        let metadata: JsonObjectMetadata | undefined;\n        if (prototype.hasOwnProperty(METADATA_FIELD_KEY)) {\n            // The class prototype contains own jsonObject metadata\n            metadata = prototype[METADATA_FIELD_KEY];\n        }\n\n        // Ignore implicitly added jsonObject (through jsonMember)\n        if (metadata && metadata.isExplicitlyMarked) {\n            return metadata;\n        }\n\n        // In the end maybe it is something which we can handle directly\n        if (JsonObjectMetadata.doesHandleWithoutAnnotation(ctor)) {\n            const primitiveMeta = new JsonObjectMetadata(ctor);\n            primitiveMeta.isExplicitlyMarked = true;\n            // we do not store the metadata here to not modify builtin prototype\n            return primitiveMeta;\n        }\n    }\n\n    static ensurePresentInPrototype(prototype: IndexedObject): JsonObjectMetadata {\n        if (prototype.hasOwnProperty(METADATA_FIELD_KEY)) {\n            return prototype[METADATA_FIELD_KEY];\n        }\n            // Target has no JsonObjectMetadata associated with it yet, create it now.\n        const objectMetadata = new JsonObjectMetadata(prototype.constructor);\n\n        // Inherit json members and known types from parent @jsonObject (if any).\n        const parentMetadata: JsonObjectMetadata = prototype[METADATA_FIELD_KEY];\n        if (parentMetadata) {\n            parentMetadata.dataMembers\n                .forEach((memberMetadata, propKey) => objectMetadata.dataMembers.set(propKey, memberMetadata));\n            parentMetadata.knownTypes\n                .forEach((knownType) => objectMetadata.knownTypes.add(knownType));\n            objectMetadata.typeResolver = parentMetadata.typeResolver;\n            objectMetadata.typeHintEmitter = parentMetadata.typeHintEmitter;\n        }\n\n        Object.defineProperty(prototype, METADATA_FIELD_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: objectMetadata,\n        });\n        return objectMetadata;\n    }\n\n    /**\n     * Gets the known type name of a jsonObject class for type hint.\n     * @param constructor The constructor class.\n     */\n    static getKnownTypeNameFromType(constructor: Function): string {\n        const metadata = JsonObjectMetadata.getFromConstructor(constructor);\n        return metadata ? nameof(metadata.classType) : nameof(constructor);\n    }\n\n    private static doesHandleWithoutAnnotation(ctor: Function): boolean {\n        return isDirectlySerializableNativeType(ctor) || isTypeTypedArray(ctor)\n            || ctor === DataView || ctor === ArrayBuffer;\n    }\n    // #endregion\n\n    constructor(\n        classType: Function,\n    ) {\n        this.classType = classType;\n    }\n\n    dataMembers = new Map<string, JsonMemberMetadata>();\n\n    /** Set of known types used for polymorphic deserialization */\n    knownTypes = new Set<Serializable<any>>();\n    /** If present override the global function */\n    typeHintEmitter?: TypeHintEmitter;\n    /** If present override the global function */\n    typeResolver?: TypeResolver;\n\n    /** Gets or sets the constructor function for the jsonObject. */\n    classType: Function;\n\n    /**\n     * Indicates whether this class was explicitly annotated with @jsonObject\n     * or implicitly by @jsonMember\n     */\n    isExplicitlyMarked: boolean = false;\n\n    /**\n     * Indicates whether this type is handled without annotation. This is usually\n     * used for the builtin types (except for Maps, Sets, and normal Arrays).\n     */\n    isHandledWithoutAnnotation: boolean = false;\n\n    /** Name used to encode polymorphic type */\n    name?: string;\n\n    options?: OptionsBase;\n\n    onDeserializedMethodName?: string;\n\n    beforeSerializationMethodName?: string;\n\n    initializerCallback?: (sourceObject: Object, rawSourceObject: Object) => Object;\n}\n\nexport function injectMetadataInformation(prototype: IndexedObject, propKey: string | symbol, metadata: JsonMemberMetadata) {\n    const decoratorName = `@jsonMember on ${nameof(prototype.constructor)}.${String(propKey)}`; // For error messages.\n\n    // When a property decorator is applied to a static member, 'constructor' is a constructor function.\n    // See: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md#property-decorators\n    // ... and static members are not supported here, so abort.\n    if (typeof prototype === 'function') {\n        logError(`${decoratorName}: cannot use a static property.`);\n        return;\n    }\n\n    // Methods cannot be serialized.\n    // @ts-ignore symbol indexing is not supported by ts\n    if (typeof prototype[propKey] === 'function') {\n        logError(`${decoratorName}: cannot use a method property.`);\n        return;\n    }\n\n    if (!metadata || (!metadata.type && !metadata.deserializer)) {\n        logError(`${decoratorName}: JsonMemberMetadata has unknown type.`);\n        return;\n    }\n\n    // Add jsonObject metadata to 'constructor' if not yet exists ('constructor' is the prototype).\n    // NOTE: this will not fire up custom serialization, as 'constructor' must be explicitly marked with '@jsonObject' as well.\n    const objectMetadata = JsonObjectMetadata.ensurePresentInPrototype(prototype);\n\n    if (!metadata.deserializer) {\n        // @ts-ignore above is a check (!deser && !ctor)\n        metadata.type.getTypes().forEach(ctor => objectMetadata.knownTypes.add(ctor));\n    }\n\n    // clear metadata of undefined properties to save memory\n    (Object.keys(metadata) as [keyof JsonMemberMetadata])\n        .forEach((key) => (metadata[key] === undefined) && delete metadata[key]);\n    objectMetadata.dataMembers.set(metadata.name, metadata);\n}\n","/**\n * This options cascade through the annotations. Options set\n * in the more specific place override the previous option.\n * Ex. @jsonMember overrides TypedJson options.\n */\nexport interface OptionsBase {\n    /**\n     * Whether to preserve null in the JSON output. When false it\n     * will not emit nor store the property if its value is null.\n     * Default: false.\n     */\n    preserveNull?: boolean;\n}\n\nconst kAllOptions: Array<keyof OptionsBase> = [\n    'preserveNull',\n];\n\nexport function extractOptionBase(from: {[key: string]: any} & OptionsBase): OptionsBase | undefined {\n    const options = Object.keys(from)\n        .filter(key => (kAllOptions as Array<string>).indexOf(key) > -1)\n        .reduce((obj, key) => {\n            obj[key] = from[key];\n            return obj;\n        }, {} as any);\n    return Object.keys(options).length > 0 ? options : undefined;\n}\n\nexport function getDefaultOptionOf<K extends keyof OptionsBase>(key: K): Required<OptionsBase>[K] {\n    switch (key) {\n        case 'preserveNull':\n            return false;\n    }\n    // never reached\n    return null as any;\n}\n\nexport function getOptionValue<K extends keyof OptionsBase>(\n    key: K,\n    options?: OptionsBase,\n): Required<OptionsBase>[K] {\n    if (options && options[key] != null) {\nreturn options[key]!;\n}\n    return getDefaultOptionOf(key);\n}\n\nexport function mergeOptions(\n    existing?: OptionsBase,\n    moreSpecific?: OptionsBase,\n): OptionsBase | undefined {\n    return !moreSpecific\n        ? existing\n        : {\n\n            ...existing,\n            ...moreSpecific,\n        };\n}\n","export abstract class TypeDescriptor {\n    protected constructor(readonly ctor: Function) {}\n\n    getTypes(): Array<Function> {\n        return [this.ctor];\n    }\n}\n\nexport type Typelike = TypeDescriptor | Function;\n\nexport class ConcreteTypeDescriptor extends TypeDescriptor {\n    constructor(ctor: Function) {\n        super(ctor);\n    }\n}\n\nexport abstract class GenericTypeDescriptor extends TypeDescriptor {\n    protected constructor(ctor: Function) {\n        super(ctor);\n    }\n}\n\nexport class ArrayTypeDescriptor extends GenericTypeDescriptor {\n    constructor(readonly elementType: TypeDescriptor) {\n        super(Array);\n    }\n\n    getTypes(): Array<Function> {\n        return super.getTypes().concat(this.elementType.getTypes());\n    }\n}\n\nexport function ArrayT(elementType: Typelike): ArrayTypeDescriptor {\n    return new ArrayTypeDescriptor(ensureTypeDescriptor(elementType));\n}\n\nexport class SetTypeDescriptor extends GenericTypeDescriptor {\n    constructor(readonly elementType: TypeDescriptor) {\n        super(Set);\n    }\n\n    getTypes(): Array<Function> {\n        return super.getTypes().concat(this.elementType.getTypes());\n    }\n}\n\nexport function SetT(elementType: Typelike): SetTypeDescriptor {\n    return new SetTypeDescriptor(ensureTypeDescriptor(elementType));\n}\n\nexport const enum MapShape {\n    /**\n     * A map will be serialized as an array of {key: ..., value: ...} objects.\n     */\n    ARRAY,\n\n    /**\n     * A map will be serialized as a JSON object.\n     */\n    OBJECT,\n}\n\nexport interface MapOptions {\n    /**\n     * How the map should be serialized. Default is ARRAY.\n     */\n    shape: MapShape;\n}\n\nexport class MapTypeDescriptor extends GenericTypeDescriptor {\n    constructor(\n        readonly keyType: TypeDescriptor,\n        readonly valueType: TypeDescriptor,\n        readonly options?: Partial<MapOptions>,\n    ) {\n        super(Map);\n    }\n\n    getTypes(): Array<Function> {\n        return super.getTypes().concat(this.keyType.getTypes(), this.valueType.getTypes());\n    }\n\n    getCompleteOptions(): MapOptions {\n        return {\n            shape: this.options?.shape ? this.options.shape : MapShape.ARRAY,\n        };\n    }\n}\n\nexport function MapT(keyType: Typelike, valueType: Typelike, options?: Partial<MapOptions>): MapTypeDescriptor {\n    return new MapTypeDescriptor(ensureTypeDescriptor(keyType), ensureTypeDescriptor(valueType), options);\n}\n\n// TODO support for dictionary types ie. maps that are plain objects\n// export class DictionaryTypeDescriptor extends GenericTypeDescriptor {\n//     constructor(public readonly elementType: TypeDescriptor) {\n//         super(Object);\n//     }\n//\n//     getTypes(): Function[] {\n//         return super.getTypes().concat(this.elementType.getTypes());\n//     }\n// }\n//\n// export function DictT(elementType: Typelike): DictionaryTypeDescriptor {\n//     return new DictionaryTypeDescriptor(ensureTypeDescriptor(elementType));\n// }\n\nexport function isTypelike(type: any): type is Typelike {\n    return type && (typeof type === 'function' || type instanceof TypeDescriptor);\n}\n\nexport function ensureTypeDescriptor(type: Typelike): TypeDescriptor {\n    return type instanceof TypeDescriptor ? type : new ConcreteTypeDescriptor(type);\n}\n","import {isSubtypeOf, isValueDefined, logError, nameof} from './helpers';\nimport {JsonObjectMetadata, TypeResolver} from './metadata';\nimport {getOptionValue, mergeOptions, OptionsBase} from './options-base';\nimport {\n    ArrayTypeDescriptor,\n    ConcreteTypeDescriptor,\n    MapShape,\n    MapTypeDescriptor,\n    SetTypeDescriptor,\n    TypeDescriptor,\n} from './type-descriptor';\nimport {Constructor, IndexedObject, Serializable} from './types';\n\nexport function defaultTypeResolver(sourceObject: IndexedObject, knownTypes: Map<string, Function>): Function | undefined {\n    if (sourceObject.__type) {\nreturn knownTypes.get(sourceObject.__type);\n}\n}\n\nexport type DeserializerFn<T, TD extends TypeDescriptor, Raw> = (\n    sourceObject: Raw,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<T>,\n    memberOptions?: OptionsBase,\n) => T;\n\n/**\n * Utility class, converts a simple/untyped javascript object-tree to a typed object-tree.\n * It is used after parsing a JSON-string.\n */\nexport class Deserializer<T> {\n    options?: OptionsBase;\n\n    private typeResolver: TypeResolver = defaultTypeResolver;\n    private nameResolver?: (ctor: Function) => string;\n    private errorHandler: (error: Error) => void = logError;\n    private deserializationStrategy = new Map<Serializable<any>, DeserializerFn<any, TypeDescriptor, any>>([\n        // primitives\n        [Number, deserializeDirectly],\n        [String, deserializeDirectly],\n        [Boolean, deserializeDirectly],\n\n        [Date, deserializeDate],\n        [ArrayBuffer, stringToArrayBuffer],\n        [DataView, stringToDataView],\n\n        [Array, convertAsArray],\n        [Set, convertAsSet],\n        [Map, convertAsMap],\n\n        // typed arrays\n        [Float32Array, convertAsFloatArray],\n        [Float64Array, convertAsFloatArray],\n        [Uint8Array, convertAsUintArray],\n        [Uint8ClampedArray, convertAsUintArray],\n        [Uint16Array, convertAsUintArray],\n        [Uint32Array, convertAsUintArray],\n    ]);\n\n    setNameResolver(nameResolverCallback: (ctor: Function) => string) {\n        this.nameResolver = nameResolverCallback;\n    }\n\n    setTypeResolver(typeResolverCallback: TypeResolver) {\n        if (typeof typeResolverCallback !== 'function') {\n            throw new TypeError('\\'typeResolverCallback\\' is not a function.');\n        }\n\n        this.typeResolver = typeResolverCallback;\n    }\n\n    getTypeResolver(): TypeResolver {\n        return this.typeResolver;\n    }\n\n    setErrorHandler(errorHandlerCallback: (error: Error) => void) {\n        if (typeof errorHandlerCallback !== 'function') {\n            throw new TypeError('\\'errorHandlerCallback\\' is not a function.');\n        }\n\n        this.errorHandler = errorHandlerCallback;\n    }\n\n    getErrorHandler(): (error: Error) => void {\n        return this.errorHandler;\n    }\n\n    convertSingleValue(\n        sourceObject: any,\n        typeDescriptor: TypeDescriptor,\n        knownTypes: Map<string, Function>,\n        memberName = 'object',\n        memberOptions?: OptionsBase,\n    ): any {\n        if (this.retrievePreserveNull(memberOptions) && sourceObject === null) {\n            return null;\n        } else if (!isValueDefined(sourceObject)) {\n            return;\n        }\n\n        const deserializer = this.deserializationStrategy.get(typeDescriptor.ctor);\n        if (deserializer) {\n            return deserializer(sourceObject, typeDescriptor, knownTypes, memberName, this, memberOptions);\n        }\n\n        if (typeof sourceObject === 'object') {\n            return convertAsObject(sourceObject, typeDescriptor, knownTypes, memberName, this);\n        }\n        this.errorHandler(new TypeError(\n            `Could not deserialize '${memberName}': don't know how to deserialize this type'.`,\n));\n    }\n\n    instantiateType(ctor: any) {\n        return new ctor();\n    }\n\n    mergeKnownTypes(...knownTypeMaps: Array<Map<string, Function>>) {\n        const result = new Map<string, Function>();\n\n        knownTypeMaps.forEach(knownTypes => {\n            knownTypes.forEach((ctor, name) => {\n                if (this.nameResolver) {\n                    result.set(this.nameResolver(ctor), ctor);\n                } else {\n                    result.set(name, ctor);\n                }\n            });\n        });\n\n        return result;\n    }\n\n    createKnownTypesMap(knowTypes: Set<Function>) {\n        const map = new Map<string, Function>();\n\n        knowTypes.forEach(ctor => {\n            if (this.nameResolver) {\n                map.set(this.nameResolver(ctor), ctor);\n            } else {\n                const knownTypeMeta = JsonObjectMetadata.getFromConstructor(ctor);\n                const name = knownTypeMeta && knownTypeMeta.isExplicitlyMarked && knownTypeMeta.name\n                    ? knownTypeMeta.name\n                    : ctor.name;\n                map.set(name, ctor);\n            }\n        });\n\n        return map;\n    }\n\n    private isExpectedMapShape(source: any, expectedShape: MapShape): boolean {\n        return (expectedShape === MapShape.ARRAY && Array.isArray(source))\n        || (expectedShape === MapShape.OBJECT && typeof source === 'object');\n    }\n\n    retrievePreserveNull(memberOptions?: OptionsBase): boolean {\n        return getOptionValue('preserveNull', mergeOptions(this.options, memberOptions));\n    }\n}\n\nfunction throwTypeMismatchError(\n    targetType: string,\n    expectedSourceType: string,\n    actualSourceType: string,\n    memberName: string,\n): never {\n    throw new TypeError(\n        `Could not deserialize ${memberName} as ${targetType}:`\n        + ` expected ${expectedSourceType}, got ${actualSourceType}.`,\n    );\n}\n\nfunction makeTypeErrorMessage(expectedType: Function | string, actualType: Function | string, memberName: string) {\n    const expectedTypeName = typeof expectedType === 'function' ? nameof(expectedType) : expectedType;\n    const actualTypeName = typeof actualType === 'function' ? nameof(actualType) : actualType;\n\n    return `Could not deserialize ${memberName}: expected '${expectedTypeName}', got '${actualTypeName}'.`;\n}\n\nfunction srcTypeNameForDebug(sourceObject: any) {\n    return sourceObject ? nameof(sourceObject.constructor) : 'undefined';\n}\n\nfunction deserializeDirectly<T extends string | number | boolean>(\n    sourceObject: T,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    objectName: string,\n): T {\n    if (sourceObject.constructor !== typeDescriptor.ctor) {\n        throw new TypeError(makeTypeErrorMessage(nameof(typeDescriptor.ctor), sourceObject.constructor, objectName));\n    }\n    return sourceObject;\n}\n\nfunction convertAsObject<T>(\n    sourceObject: IndexedObject,\n    typeDescriptor: ConcreteTypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<any>,\n): IndexedObject | T | undefined {\n    if (typeof sourceObject !== 'object' || sourceObject === null) {\n        deserializer.getErrorHandler()(\n            new TypeError(`Cannot deserialize ${memberName}: 'sourceObject' must be a defined object.`),\n        );\n        return undefined;\n    }\n\n    let expectedSelfType = typeDescriptor.ctor;\n    let sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(expectedSelfType);\n    let knownTypeConstructors = knownTypes;\n    let typeResolver = deserializer.getTypeResolver();\n\n    if (sourceObjectMetadata) {\n        // Merge known types received from \"above\" with known types defined on the current type.\n        knownTypeConstructors = deserializer.mergeKnownTypes(\n            knownTypeConstructors,\n            deserializer.createKnownTypesMap(sourceObjectMetadata.knownTypes),\n        );\n        if (sourceObjectMetadata.typeResolver) {\n            typeResolver = sourceObjectMetadata.typeResolver;\n        }\n    }\n\n    // Check if a type-hint is available from the source object.\n    const typeFromTypeHint = typeResolver(sourceObject, knownTypeConstructors);\n\n    if (typeFromTypeHint) {\n        // Check if type hint is a valid subtype of the expected source type.\n        if (isSubtypeOf(typeFromTypeHint, expectedSelfType)) {\n            // Hell yes.\n            expectedSelfType = typeFromTypeHint;\n            sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(typeFromTypeHint);\n\n            if (sourceObjectMetadata) {\n                // Also merge new known types from subtype.\n                knownTypeConstructors = deserializer.mergeKnownTypes(\n                    knownTypeConstructors,\n                    deserializer.createKnownTypesMap(sourceObjectMetadata.knownTypes),\n                );\n            }\n        }\n    }\n\n    if (sourceObjectMetadata && sourceObjectMetadata.isExplicitlyMarked) {\n        const sourceMetadata = sourceObjectMetadata;\n        // Strong-typed deserialization available, get to it.\n        // First deserialize properties into a temporary object.\n        const sourceObjectWithDeserializedProperties = {} as IndexedObject;\n\n        const classOptions = mergeOptions(deserializer.options, sourceMetadata.options);\n\n        // Deserialize by expected properties.\n        sourceMetadata.dataMembers.forEach((objMemberMetadata, propKey) => {\n            const objMemberValue = sourceObject[propKey];\n            const objMemberDebugName = `${nameof(sourceMetadata.classType)}.${propKey}`;\n            const objMemberOptions = mergeOptions(classOptions, objMemberMetadata.options);\n\n            let revivedValue;\n            if (objMemberMetadata.deserializer) {\n                revivedValue = objMemberMetadata.deserializer(objMemberValue);\n            } else if (objMemberMetadata.type) {\n                revivedValue = deserializer.convertSingleValue(\n                    objMemberValue,\n                    objMemberMetadata.type,\n                    knownTypeConstructors,\n                    objMemberDebugName,\n                    objMemberOptions,\n                );\n            } else {\n                throw new TypeError(\n                    `Cannot deserialize ${objMemberDebugName} there is`\n                    + ` no constructor nor deserialization function to use.`,\n                );\n            }\n\n            if (isValueDefined(revivedValue)\n                || (deserializer.retrievePreserveNull(objMemberOptions) && revivedValue === null)\n            ) {\n                sourceObjectWithDeserializedProperties[objMemberMetadata.key] = revivedValue;\n            } else if (objMemberMetadata.isRequired) {\n                deserializer.getErrorHandler()(new TypeError(`Missing required member '${objMemberDebugName}'.`));\n            }\n        });\n\n        // Next, instantiate target object.\n        let targetObject: IndexedObject;\n\n        if (typeof sourceObjectMetadata.initializerCallback === 'function') {\n            try {\n                targetObject = sourceObjectMetadata.initializerCallback(\n                    sourceObjectWithDeserializedProperties,\n                    sourceObject,\n                );\n\n                // Check the validity of user-defined initializer callback.\n                if (!targetObject) {\n                    throw new TypeError(\n                        `Cannot deserialize ${memberName}:`\n                        + ` 'initializer' function returned undefined/null`\n                        + `, but '${nameof(sourceObjectMetadata.classType)}' was expected.`,\n                    );\n                } else if (!(targetObject instanceof sourceObjectMetadata.classType)) {\n                    throw new TypeError(\n                        `Cannot deserialize ${memberName}:`\n                        + `'initializer' returned '${nameof(targetObject.constructor)}'`\n                        + `, but '${nameof(sourceObjectMetadata.classType)}' was expected`\n                        + `, and '${nameof(targetObject.constructor)}' is not a subtype of`\n                        + ` '${nameof(sourceObjectMetadata.classType)}'`,\n                    );\n                }\n            } catch (e) {\n                deserializer.getErrorHandler()(e);\n                return undefined;\n            }\n        } else {\n            targetObject = deserializer.instantiateType(expectedSelfType);\n        }\n\n        // Finally, assign deserialized properties to target object.\n        Object.assign(targetObject, sourceObjectWithDeserializedProperties);\n\n        // Call onDeserialized method (if any).\n        if (sourceObjectMetadata.onDeserializedMethodName) {\n            // check for member first\n            if (typeof (targetObject as any)[sourceObjectMetadata.onDeserializedMethodName] === 'function') {\n                (targetObject as any)[sourceObjectMetadata.onDeserializedMethodName]();\n            }\n            // check for static\n            else if (typeof (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName] === 'function') {\n                (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName]();\n            } else {\n                deserializer.getErrorHandler()(new TypeError(\n                    `onDeserialized callback '${nameof(sourceObjectMetadata.classType)}.${sourceObjectMetadata.onDeserializedMethodName}' is not a method.`,\n                ));\n            }\n        }\n\n        return targetObject;\n    } else {\n        // Untyped deserialization into Object instance.\n        const targetObject = {} as IndexedObject;\n\n        Object.keys(sourceObject).forEach(sourceKey => {\n            targetObject[sourceKey] = deserializer.convertSingleValue(\n                sourceObject[sourceKey],\n                new ConcreteTypeDescriptor(sourceObject[sourceKey].constructor),\n                knownTypes,\n                sourceKey,\n            );\n        });\n\n        return targetObject;\n    }\n}\n\nfunction convertAsArray(\n    sourceObject: any,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<any>,\n    memberOptions?: OptionsBase,\n): Array<any> {\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor)) {\n        throw new TypeError(`Could not deserialize ${memberName} as Array: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!Array.isArray(sourceObject)) {\n        deserializer.getErrorHandler()(\n            new TypeError(makeTypeErrorMessage(Array, sourceObject.constructor, memberName)),\n        );\n        return [];\n    }\n\n    if (!typeDescriptor.elementType) {\n        deserializer.getErrorHandler()(\n            new TypeError(`Could not deserialize ${memberName} as Array: missing constructor reference of Array elements.`),\n        );\n        return [];\n    }\n\n    return sourceObject.map(element => {\n        // If an array element fails to deserialize, substitute with undefined. This is so that the original ordering is not interrupted by faulty\n        // entries, as an Array is ordered.\n        try {\n            return deserializer.convertSingleValue(\n                element,\n                typeDescriptor.elementType,\n                knownTypes,\n                `${memberName}[]`,\n                memberOptions,\n            );\n        } catch (e) {\n            deserializer.getErrorHandler()(e);\n\n            // Keep filling the array here with undefined to keep original ordering.\n            // Note: this is just aesthetics, not returning anything produces the same result.\n            return undefined;\n        }\n    });\n}\n\nfunction convertAsSet(\n    sourceObject: any,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<any>,\n    memberOptions?: OptionsBase,\n): Set<any> {\n    if (!(typeDescriptor instanceof SetTypeDescriptor)) {\n        throw new TypeError(`Could not deserialize ${memberName} as Set: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!Array.isArray(sourceObject)) {\n        deserializer.getErrorHandler()(new TypeError(makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n        return new Set<any>();\n    }\n\n    if (!typeDescriptor.elementType) {\n        deserializer.getErrorHandler()(\n            new TypeError(`Could not deserialize ${memberName} as Set: missing constructor reference of Set elements.`),\n        );\n        return new Set<any>();\n    }\n\n    const resultSet = new Set<any>();\n\n    sourceObject.forEach((element, i) => {\n        try {\n            resultSet.add(deserializer.convertSingleValue(\n                element,\n                typeDescriptor.elementType,\n                knownTypes,\n                `${memberName}[${i}]`,\n                memberOptions,\n            ));\n        } catch (e) {\n            // Faulty entries are skipped, because a Set is not ordered, and skipping an entry\n            // does not affect others.\n            deserializer.getErrorHandler()(e);\n        }\n    });\n\n    return resultSet;\n}\n\nfunction isExpectedMapShape(source: any, expectedShape: MapShape): boolean {\n    return (expectedShape === MapShape.ARRAY && Array.isArray(source))\n        || (expectedShape === MapShape.OBJECT && typeof source === 'object');\n}\n\nfunction convertAsMap(\n    sourceObject: any,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n    deserializer: Deserializer<any>,\n    memberOptions?: OptionsBase,\n): Map<any, any> {\n    if (!(typeDescriptor instanceof MapTypeDescriptor)) {\n        throw new TypeError(`Could not deserialize ${memberName} as Map: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    const expectedShape = typeDescriptor.getCompleteOptions().shape;\n    if (!isExpectedMapShape(sourceObject, expectedShape)) {\n        const expectedType = expectedShape === MapShape.ARRAY ? Array : Object;\n        deserializer.getErrorHandler()(\n            new TypeError(makeTypeErrorMessage(expectedType, sourceObject.constructor, memberName)),\n        );\n        return new Map<any, any>();\n    }\n\n    if (!typeDescriptor.keyType) {\n        deserializer.getErrorHandler()(\n            new TypeError(`Could not deserialize ${memberName} as Map: missing key constructor.`),\n        );\n        return new Map<any, any>();\n    }\n\n    if (!typeDescriptor.valueType) {\n        deserializer.getErrorHandler()(\n            new TypeError(`Could not deserialize ${memberName} as Map: missing value constructor.`),\n        );\n        return new Map<any, any>();\n    }\n\n    const resultMap = new Map<any, any>();\n\n    if (expectedShape === MapShape.OBJECT) {\n        Object.keys(sourceObject).forEach(key => {\n            try {\n                const resultKey = deserializer.convertSingleValue(\n                    key,\n                    typeDescriptor.keyType,\n                    knownTypes,\n                    memberName,\n                    memberOptions,\n                );\n                if (isValueDefined(resultKey)) {\n                    resultMap.set(\n                        resultKey,\n                        deserializer.convertSingleValue(\n                            sourceObject[key],\n                            typeDescriptor.valueType,\n                            knownTypes,\n                            `${memberName}[${resultKey}]`,\n                            memberOptions,\n                        ),\n                    );\n                }\n            } catch (e) {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                deserializer.getErrorHandler()(e);\n            }\n        });\n    } else {\n        sourceObject.forEach((element: any) => {\n            try {\n                const key = deserializer.convertSingleValue(\n                    element.key,\n                    typeDescriptor.keyType,\n                    knownTypes,\n                    memberName,\n                    memberOptions,\n                );\n\n                // Undefined/null keys not supported, skip if so.\n                if (isValueDefined(key)) {\n                    resultMap.set(\n                        key,\n                        deserializer.convertSingleValue(\n                            element.value,\n                            typeDescriptor.valueType,\n                            knownTypes,\n                            `${memberName}[${key}]`,\n                            memberOptions,\n                        ),\n                    );\n                }\n            } catch (e) {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                deserializer.getErrorHandler()(e);\n            }\n        });\n    }\n\n    return resultMap;\n}\n\nfunction deserializeDate(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n): Date {\n    // Support for Date with ISO 8601 format, or with numeric timestamp (milliseconds elapsed since the Epoch).\n    // ISO 8601 spec.: https://www.w3.org/TR/NOTE-datetime\n\n    if (typeof sourceObject === 'string' || (typeof sourceObject === 'number' && sourceObject > 0)) {\n        return new Date(sourceObject as any);\n    } else if (sourceObject instanceof Date) {\n        return sourceObject;\n    } else {\n        throwTypeMismatchError('Date', 'an ISO-8601 string', srcTypeNameForDebug(sourceObject), memberName);\n    }\n}\n\nfunction stringToArrayBuffer(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n) {\n    if (typeof sourceObject !== 'string') {\n        throwTypeMismatchError('ArrayBuffer', 'a string source', srcTypeNameForDebug(sourceObject), memberName);\n    }\n    return createArrayBufferFromString(sourceObject);\n}\n\nfunction stringToDataView(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n) {\n    if (typeof sourceObject !== 'string') {\n        throwTypeMismatchError('DataView', 'a string source', srcTypeNameForDebug(sourceObject), memberName);\n    }\n    return new DataView(createArrayBufferFromString(sourceObject));\n}\n\nfunction createArrayBufferFromString(input: string): ArrayBuffer {\n    const buf = new ArrayBuffer(input.length * 2); // 2 bytes for each char\n    const bufView = new Uint16Array(buf);\n\n    for (let i = 0, strLen = input.length; i < strLen; i++) {\n        bufView[i] = input.charCodeAt(i);\n    }\n\n    return buf;\n}\n\nfunction convertAsFloatArray<T extends Float32Array | Float64Array>(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n): T {\n    const constructor = typeDescriptor.ctor as Constructor<T>;\n    if (Array.isArray(sourceObject) && sourceObject.every(elem => !isNaN(elem))) {\n        return new constructor(sourceObject);\n    }\n    return throwTypeMismatchError(\n        constructor.name,\n        'a numeric source array',\n        srcTypeNameForDebug(sourceObject),\n        memberName,\n    );\n}\n\nfunction convertAsUintArray<T extends Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array>(\n    sourceObject: string | number | Date,\n    typeDescriptor: TypeDescriptor,\n    knownTypes: Map<string, Function>,\n    memberName: string,\n): T {\n    const constructor = typeDescriptor.ctor as Constructor<T>;\n    if (Array.isArray(sourceObject) && sourceObject.every(elem => !isNaN(elem))) {\n        return new constructor(sourceObject.map(value => ~~value));\n    }\n    return throwTypeMismatchError(\n        typeDescriptor.ctor.name,\n        'a numeric source array',\n        srcTypeNameForDebug(sourceObject),\n        memberName,\n    );\n}\n","import {isReflectMetadataSupported, logError, MISSING_REFLECT_CONF_MSG, nameof} from './helpers';\nimport {injectMetadataInformation} from './metadata';\nimport {extractOptionBase, OptionsBase} from './options-base';\nimport {\n    ArrayTypeDescriptor,\n    ensureTypeDescriptor,\n    isTypelike,\n    TypeDescriptor,\n} from './type-descriptor';\n\ndeclare abstract class Reflect {\n    static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonArrayMemberOptions extends OptionsBase {\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, an empty array is emitted if the property is undefined/uninitialized. */\n    emitDefaultValue?: boolean;\n\n    /** Sets array dimensions (e.g. 1 for 'number[]' or 2 for 'number[][]'). Defaults to 1. */\n    dimensions?: number;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property, of type array, is part of an object when serializing.\n * @param elementConstructor Constructor of array elements (e.g. 'Number' for 'number[]', or 'Date' for 'Date[]').\n * @param options Additional options.\n */\nexport function jsonArrayMember(elementConstructor: Function | TypeDescriptor, options: IJsonArrayMemberOptions = {}) {\n    return (target: Object, propKey: string | symbol) => {\n        const decoratorName = `@jsonArrayMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (!isTypelike(elementConstructor)) {\n            logError(`${decoratorName}: could not resolve constructor of array elements at runtime.`);\n            return;\n        }\n\n        const dimensions = options.dimensions === undefined ? 1 : options.dimensions;\n        if (!isNaN(dimensions) && dimensions < 1) {\n            logError(`${decoratorName}: 'dimensions' option must be at least 1.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonArrayMember' has been used on an array.\n        if (isReflectMetadataSupported && Reflect.getMetadata('design:type', target, propKey) !== Array) {\n            logError(`${decoratorName}: property is not an Array. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            type: createArrayType(ensureTypeDescriptor(elementConstructor), dimensions),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n\nexport function createArrayType(elementType: TypeDescriptor, dimensions: number): ArrayTypeDescriptor {\n    let type = new ArrayTypeDescriptor(elementType);\n    for (let i = 1; i < dimensions; ++i) {\n        type = new ArrayTypeDescriptor(type);\n    }\n    return type;\n}\n","import {\n    identity,\n    isInstanceOf,\n    isValueDefined,\n    logError,\n    nameof,\n} from './helpers';\nimport {JsonObjectMetadata, TypeHintEmitter} from './metadata';\nimport {getOptionValue, mergeOptions, OptionsBase} from './options-base';\nimport {\n    ArrayTypeDescriptor,\n    ConcreteTypeDescriptor,\n    MapShape,\n    MapTypeDescriptor,\n    SetTypeDescriptor,\n    TypeDescriptor,\n} from './type-descriptor';\nimport {IndexedObject, Serializable} from './types';\n\nexport function defaultTypeEmitter(\n    targetObject: IndexedObject,\n    sourceObject: IndexedObject,\n    expectedSourceType: Function,\n    sourceTypeMetadata?: JsonObjectMetadata,\n) {\n    // By default, we put a \"__type\" property on the output object if the actual object is not the\n    // same as the expected one, so that deserialization will know what to deserialize into (given\n    // the required known-types are defined, and the object is a valid subtype of the expected type).\n    if (sourceObject.constructor !== expectedSourceType) {\n        targetObject.__type = sourceTypeMetadata && sourceTypeMetadata.name\n            ? sourceTypeMetadata.name\n            : nameof(sourceObject.constructor);\n    }\n}\n\n/**\n * @param sourceObject The original object that should be serialized.\n * @param typeDescriptor Instance of TypeDescriptor containing information about expected serialization.\n * @param memberName Name of the object being serialized, used for debugging purposes.\n * @param serializer Serializer instance, aiding with recursive serialization.\n * @param memberOptions If converted as a member, the member options.\n */\nexport type SerializerFn<T, TD extends TypeDescriptor, Raw> = (\n    sourceObject: T,\n    typeDescriptor: TD,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n) => Raw;\n\n/**\n * Utility class, converts a typed object tree (i.e. a tree of class instances, arrays of class\n * instances, and so on) to an untyped javascript object (also called \"simple javascript object\"),\n * and emits any necessary type hints in the process (for polymorphism).\n *\n * The converted object tree is what will be given to `JSON.stringify` to convert to string as the\n * last step, the serialization is basically like:\n *\n * (1) typed object-tree -> (2) simple JS object-tree -> (3) JSON-string\n */\nexport class Serializer {\n    options?: OptionsBase;\n    private typeHintEmitter: TypeHintEmitter = defaultTypeEmitter;\n    private errorHandler: (error: Error) => void = logError;\n    private serializationStrategy = new Map<Serializable<any>, SerializerFn<any, TypeDescriptor, any>>([\n        // primitives\n        [Date, identity],\n        [Number, identity],\n        [String, identity],\n        [Boolean, identity],\n\n        [ArrayBuffer, convertAsArrayBuffer],\n        [DataView, convertAsDataView],\n\n        [Array, convertAsArray],\n        [Set, convertAsSet],\n        [Map, convertAsMap],\n\n        // typed arrays\n        [Float32Array, convertAsTypedArray],\n        [Float64Array, convertAsTypedArray],\n        [Int8Array, convertAsTypedArray],\n        [Uint8Array, convertAsTypedArray],\n        [Uint8ClampedArray, convertAsTypedArray],\n        [Int16Array, convertAsTypedArray],\n        [Uint16Array, convertAsTypedArray],\n        [Int32Array, convertAsTypedArray],\n        [Uint32Array, convertAsTypedArray],\n    ]);\n\n    setTypeHintEmitter(typeEmitterCallback: TypeHintEmitter) {\n        if (typeof typeEmitterCallback !== 'function') {\n            throw new TypeError('\\'typeEmitterCallback\\' is not a function.');\n        }\n\n        this.typeHintEmitter = typeEmitterCallback;\n    }\n\n    getTypeHintEmitter(): TypeHintEmitter {\n        return this.typeHintEmitter;\n    }\n\n    setErrorHandler(errorHandlerCallback: (error: Error) => void) {\n        if (typeof errorHandlerCallback !== 'function') {\n            throw new TypeError('\\'errorHandlerCallback\\' is not a function.');\n        }\n\n        this.errorHandler = errorHandlerCallback;\n    }\n\n    getErrorHandler(): (error: Error) => void {\n        return this.errorHandler;\n    }\n\n    retrievePreserveNull(memberOptions?: OptionsBase): boolean {\n        return getOptionValue('preserveNull', mergeOptions(this.options, memberOptions));\n    }\n\n    /**\n     * Convert a value of any supported serializable type.\n     * The value type will be detected, and the correct serialization method will be called.\n     */\n    convertSingleValue(\n        sourceObject: any,\n        typeDescriptor: TypeDescriptor,\n        memberName: string = 'object',\n        memberOptions?: OptionsBase,\n    ): any {\n        if (this.retrievePreserveNull(memberOptions) && sourceObject === null) {\nreturn null;\n}\n        if (!isValueDefined(sourceObject)) {\nreturn;\n}\n\n        if (!isInstanceOf(sourceObject, typeDescriptor.ctor)) {\n            const expectedName = nameof(typeDescriptor.ctor);\n            const actualName = nameof(sourceObject.constructor);\n\n            this.errorHandler(new TypeError(\n                `Could not serialize '${memberName}': expected '${expectedName}', got '${actualName}'.`,\n));\n            return;\n        }\n\n        const serializer = this.serializationStrategy.get(typeDescriptor.ctor);\n        if (serializer) {\n            return serializer(sourceObject, typeDescriptor, memberName, this, memberOptions);\n        }\n        // if not present in the strategy do property by property serialization\n        if (typeof sourceObject === 'object') {\n            return convertAsObject(sourceObject, typeDescriptor, memberName, this, memberOptions);\n        }\n        this.errorHandler(new TypeError(\n            `Could not serialize '${memberName}': don't know how to serialize this type'.`,\n));\n    }\n}\n\n/**\n * Performs the conversion of a typed object (usually a class instance) to a simple\n * javascript object for serialization.\n */\nfunction convertAsObject(\n    sourceObject: IndexedObject,\n    typeDescriptor: ConcreteTypeDescriptor,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n) {\n    let sourceTypeMetadata: JsonObjectMetadata | undefined;\n    let targetObject: IndexedObject;\n    let typeHintEmitter = serializer.getTypeHintEmitter();\n\n    if (sourceObject.constructor !== typeDescriptor.ctor && sourceObject instanceof typeDescriptor.ctor) {\n        // The source object is not of the expected type, but it is a valid subtype.\n        // This is OK, and we'll proceed to gather object metadata from the subtype instead.\n        sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(sourceObject.constructor);\n    } else {\n        sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(typeDescriptor.ctor);\n    }\n\n    if (sourceTypeMetadata) {\n        if (sourceTypeMetadata.beforeSerializationMethodName) {\n            // check for member first\n            if (typeof (sourceObject as any)[sourceTypeMetadata.beforeSerializationMethodName] === 'function') {\n                (sourceObject as any)[sourceTypeMetadata.beforeSerializationMethodName]();\n            }\n            // check for static\n            else if (typeof (sourceObject.constructor as any)[sourceTypeMetadata.beforeSerializationMethodName] === 'function') {\n                (sourceObject.constructor as any)[sourceTypeMetadata.beforeSerializationMethodName]();\n            } else {\n                serializer.getErrorHandler()(new TypeError(\n                    `beforeSerialization callback '${nameof(sourceTypeMetadata.classType)}.${sourceTypeMetadata.beforeSerializationMethodName}' is not a method.`,\n                ));\n            }\n        }\n\n        const sourceMeta = sourceTypeMetadata;\n        // Strong-typed serialization available.\n        // We'll serialize by members that have been marked with @jsonMember (including array/set/map members),\n        // and perform recursive conversion on each of them. The converted objects are put on the 'targetObject',\n        // which is what will be put into 'JSON.stringify' finally.\n        targetObject = {};\n\n        const classOptions = mergeOptions(serializer.options, sourceMeta.options);\n        if (sourceMeta.typeHintEmitter) {\n            typeHintEmitter = sourceMeta.typeHintEmitter;\n        }\n\n        sourceMeta.dataMembers.forEach((objMemberMetadata) => {\n            const objMemberOptions = mergeOptions(classOptions, objMemberMetadata.options);\n            let serialized;\n            if (objMemberMetadata.serializer) {\n                serialized = objMemberMetadata.serializer(sourceObject[objMemberMetadata.key]);\n            } else if (objMemberMetadata.type) {\n                serialized = serializer.convertSingleValue(\n                    sourceObject[objMemberMetadata.key],\n                    objMemberMetadata.type,\n                    `${nameof(sourceMeta.classType)}.${objMemberMetadata.key}`,\n                    objMemberOptions,\n                );\n            } else {\n                throw new TypeError(\n                    `Could not serialize ${objMemberMetadata.name}, there is`\n                    + ` no constructor nor serialization function to use.`,\n                );\n            }\n\n            if (isValueDefined(serialized)\n                || (serializer.retrievePreserveNull(objMemberOptions) && serialized === null)\n            ) {\n                targetObject[objMemberMetadata.name] = serialized;\n            }\n        });\n    } else {\n        // Untyped serialization, \"as-is\", we'll just pass the object on.\n        // We'll clone the source object, because type hints are added to the object itself, and we don't want to modify\n        // to the original object.\n        targetObject = {...sourceObject};\n    }\n\n    // Add type-hint.\n    typeHintEmitter(targetObject, sourceObject, typeDescriptor.ctor, sourceTypeMetadata);\n\n    return targetObject;\n}\n\n/**\n * Performs the conversion of an array of typed objects (or primitive values) to an array of simple javascript objects\n * (or primitive values) for serialization.\n */\nfunction convertAsArray(\n    sourceObject: Array<any>,\n    typeDescriptor: TypeDescriptor,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n): Array<any> {\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor)) {\n        throw new TypeError(`Could not serialize ${memberName} as Array: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!typeDescriptor.elementType) {\n        throw new TypeError(`Could not serialize ${memberName} as Array: missing element type definition.`);\n    }\n\n    // Check the type of each element, individually.\n    // If at least one array element type is incorrect, we return undefined, which results in no\n    // value emitted during serialization. This is so that invalid element types don't unexpectedly\n    // alter the ordering of other, valid elements, and that no unexpected undefined values are in\n    // the emitted array.\n    sourceObject.forEach((element, i) => {\n        if (!(serializer.retrievePreserveNull(memberOptions) && element === null)\n            && !isInstanceOf(element, typeDescriptor.elementType.ctor)\n        ) {\n            const expectedTypeName = nameof(typeDescriptor.elementType.ctor);\n            const actualTypeName = element && nameof(element.constructor);\n            throw new TypeError(`Could not serialize ${memberName}[${i}]:`\n                + ` expected '${expectedTypeName}', got '${actualTypeName}'.`);\n        }\n    });\n\n    if (memberName) {\n        // Just for debugging purposes.\n        memberName += '[]';\n    }\n\n    return sourceObject.map(\n        element => serializer.convertSingleValue(element, typeDescriptor.elementType, memberName, memberOptions),\n    );\n}\n\n/**\n * Performs the conversion of a set of typed objects (or primitive values) into an array\n * of simple javascript objects.\n * @returns\n */\nfunction convertAsSet(\n    sourceObject: Set<any>,\n    typeDescriptor: TypeDescriptor,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n): Array<any> {\n    if (!(typeDescriptor instanceof SetTypeDescriptor)) {\n        throw new TypeError(`Could not serialize ${memberName} as Set: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!typeDescriptor.elementType) {\n        throw new TypeError(`Could not serialize ${memberName} as Set: missing element type definition.`);\n    }\n\n    // For debugging and error tracking.\n    if (memberName) {\n        memberName += '[]';\n    }\n\n    const resultArray: Array<any> = [];\n\n    // Convert each element of the set, and put it into an output array.\n    // The output array is the one serialized, as JSON.stringify does not support Set serialization.\n    // (TODO: clarification needed)\n    sourceObject.forEach(element => {\n        const resultElement = serializer.convertSingleValue(element, typeDescriptor.elementType, memberName, memberOptions);\n\n        // Add to output if the source element was undefined, OR the converted element is defined.\n        // This will add intentionally undefined values to output, but not values that became undefined\n        // DURING serializing (usually because of a type-error).\n        if (!isValueDefined(element) || isValueDefined(resultElement)) {\n            resultArray.push(resultElement);\n        }\n    });\n\n    return resultArray;\n}\n\n/**\n * Performs the conversion of a map of typed objects (or primitive values) into an array\n * of simple javascript objects with `key` and `value` properties.\n */\nfunction convertAsMap(\n    sourceObject: Map<any, any>,\n    typeDescriptor: TypeDescriptor,\n    memberName: string,\n    serializer: Serializer,\n    memberOptions?: OptionsBase,\n): IndexedObject | Array<{ key: any; value: any }> {\n    if (!(typeDescriptor instanceof MapTypeDescriptor)) {\n        throw new TypeError(`Could not serialize ${memberName} as Map: incorrect TypeDescriptor detected, please use`\n            + ' proper annotation or function for this type');\n    }\n    if (!typeDescriptor.valueType) {\n        throw new TypeError(`Could not serialize ${memberName} as Map: missing value type definition.`);\n    }\n\n    if (!typeDescriptor.keyType) {\n        throw new TypeError(`Could not serialize ${memberName} as Map: missing key type definition.`);\n    }\n\n    if (memberName) {\n        memberName += '[]';\n    }\n\n    // const resultArray: Array<{ key: any, value: any }> = [];\n    const resultShape = typeDescriptor.getCompleteOptions().shape;\n    const result = resultShape === MapShape.OBJECT ? ({} as IndexedObject) : [];\n    const preserveNull = serializer.retrievePreserveNull(memberOptions);\n\n    // Convert each *entry* in the map to a simple javascript object with key and value properties.\n    sourceObject.forEach((value, key) => {\n        const resultKeyValuePairObj = {\n            key: serializer.convertSingleValue(key, typeDescriptor.keyType, memberName, memberOptions),\n            value: serializer.convertSingleValue(value, typeDescriptor.valueType, memberName, memberOptions),\n        };\n\n        // We are not going to emit entries with undefined keys OR undefined values.\n        const keyDefined = isValueDefined(resultKeyValuePairObj.key);\n        const valueDefined = isValueDefined(resultKeyValuePairObj.value)\n            || (resultKeyValuePairObj.value === null && preserveNull);\n        if (keyDefined && valueDefined) {\n            if (resultShape === MapShape.OBJECT) {\n                result[resultKeyValuePairObj.key] = resultKeyValuePairObj.value;\n            } else {\n                result.push(resultKeyValuePairObj);\n            }\n        }\n    });\n\n    return result;\n}\n\n/**\n * Performs the conversion of a typed javascript array to a simple untyped javascript array.\n * This is needed because typed arrays are otherwise serialized as objects, so we'll end up\n * with something like \"{ 0: 0, 1: 1, ... }\".\n */\nfunction convertAsTypedArray(sourceObject: ArrayBufferView) {\n    return Array.from(sourceObject as any);\n}\n\n/**\n * Performs the conversion of a raw ArrayBuffer to a string.\n */\nfunction convertAsArrayBuffer(buffer: ArrayBuffer) {\n    // ArrayBuffer -> 16-bit character codes -> character array -> joined string.\n    return Array.from(new Uint16Array(buffer)).map(charCode => String.fromCharCode(charCode)).join('');\n}\n\n/**\n * Performs the conversion of DataView, converting its internal ArrayBuffer to a string and\n * returning that string.\n */\nfunction convertAsDataView(dataView: DataView) {\n    return convertAsArrayBuffer(dataView.buffer);\n}\n","import {defaultTypeResolver, Deserializer} from './typedjson/deserializer';\nimport {logError, logWarning, nameof, parseToJSObject} from './typedjson/helpers';\nimport {createArrayType} from './typedjson/json-array-member';\nimport {JsonObjectMetadata, TypeHintEmitter, TypeResolver} from './typedjson/metadata';\nimport {extractOptionBase, OptionsBase} from './typedjson/options-base';\nimport {defaultTypeEmitter, Serializer} from './typedjson/serializer';\nimport {ensureTypeDescriptor, MapT, SetT} from './typedjson/type-descriptor';\nimport {Constructor, IndexedObject, Serializable} from './typedjson/types';\n\nexport type JsonTypes = Object | boolean | string | number | null | undefined;\nexport {defaultTypeResolver, defaultTypeEmitter};\n\nexport interface ITypedJSONSettings extends OptionsBase {\n    /**\n     * Sets the handler callback to invoke on errors during serializing and deserializing.\n     * Re-throwing errors in this function will halt serialization/deserialization.\n     * The default behavior is to log errors to the console.\n     */\n    errorHandler?: (e: Error) => void;\n\n    /**\n     * Sets a callback that determines the constructor of the correct sub-type of polymorphic\n     * objects while deserializing.\n     * The default behavior is to read the type-name from the '__type' property of 'sourceObject',\n     * and look it up in 'knownTypes'.\n     * The constructor of the sub-type should be returned.\n     */\n    typeResolver?: TypeResolver;\n\n    nameResolver?: (ctor: Function) => string;\n\n    /**\n     * Sets a callback that writes type-hints to serialized objects.\n     * The default behavior is to write the type-name to the '__type' property, if a derived type\n     * is present in place of a base type.\n     */\n    typeHintEmitter?: TypeHintEmitter;\n\n    /**\n     * Sets the amount of indentation to use in produced JSON strings.\n     * Default value is 0, or no indentation.\n     */\n    indent?: number;\n\n    replacer?: (key: string, value: any) => any;\n\n    knownTypes?: Array<Constructor<any>>;\n}\n\nexport class TypedJSON<T> {\n    // #region Static\n    static parse<T>(object: any, rootType: Serializable<T>, settings?: ITypedJSONSettings): T | undefined {\n        return new TypedJSON(rootType, settings).parse(object);\n    }\n\n    static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: 1\n    ): Array<T>;\n    static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings: ITypedJSONSettings | undefined,\n        dimensions: 2\n    ): Array<Array<T>>;\n    static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings: ITypedJSONSettings | undefined,\n        dimensions: 3\n    ): Array<Array<Array<T>>>;\n    static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings: ITypedJSONSettings | undefined,\n        dimensions: 4\n    ): Array<Array<Array<Array<T>>>>;\n    static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings: ITypedJSONSettings | undefined,\n        dimensions: 5\n    ): Array<Array<Array<Array<Array<T>>>>>;\n    static parseAsArray<T>(\n        object: any,\n        elementType: Serializable<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: number,\n    ): Array<any> {\n        return new TypedJSON(elementType, settings).parseAsArray(object, dimensions as any);\n    }\n\n    static parseAsSet<T>(object: any, elementType: Serializable<T>, settings?: ITypedJSONSettings): Set<T> {\n        return new TypedJSON(elementType, settings).parseAsSet(object);\n    }\n\n    static parseAsMap<K, V>(\n        object: any,\n        keyType: Serializable<K>,\n        valueType: Serializable<V>,\n        settings?: ITypedJSONSettings,\n    ): Map<K, V> {\n        return new TypedJSON(valueType, settings).parseAsMap(object, keyType);\n    }\n\n    static toPlainJson<T>(object: T, rootType: Serializable<T>, settings?: ITypedJSONSettings): JsonTypes {\n        return new TypedJSON(rootType, settings).toPlainJson(object);\n    }\n\n    static toPlainArray<T>(\n        object: Array<T>, elementType: Serializable<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): Array<Object>;\n    static toPlainArray<T>(\n        object: Array<Array<T>>, elementType: Serializable<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): Array<Array<Object>>;\n    static toPlainArray<T>(\n        object: Array<Array<Array<T>>>, elementType: Serializable<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): Array<Array<Array<Object>>>;\n    static toPlainArray<T>(\n        object: Array<Array<Array<Array<T>>>>, elementType: Serializable<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): Array<Array<Array<Array<Object>>>>;\n    static toPlainArray<T>(\n        object: Array<Array<Array<Array<Array<T>>>>>, elementType: Serializable<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): Array<Array<Array<Array<Array<Object>>>>>;\n    static toPlainArray<T>(\n        object: Array<any>, elementType: Serializable<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): Array<any>;\n    static toPlainArray<T>(object: Array<any>, elementType: Serializable<T>, dimensions?: any, settings?: ITypedJSONSettings): Array<any> {\n        return new TypedJSON(elementType, settings).toPlainArray(object, dimensions);\n    }\n\n    static toPlainSet<T>(object: Set<T>, elementType: Serializable<T>, settings?: ITypedJSONSettings): Array<Object> | undefined {\n        return new TypedJSON(elementType, settings).toPlainSet(object);\n    }\n\n    static toPlainMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Serializable<K>,\n        valueCtor: Serializable<V>,\n        settings?: ITypedJSONSettings,\n    ): IndexedObject | Array<{ key: any; value: any }> | undefined {\n        return new TypedJSON(valueCtor, settings).toPlainMap(object, keyCtor);\n    }\n\n    static stringify<T>(object: T, rootType: Serializable<T>, settings?: ITypedJSONSettings): string {\n        return new TypedJSON(rootType, settings).stringify(object);\n    }\n\n    static stringifyAsArray<T>(\n        object: Array<T>, elementType: Serializable<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): string;\n    static stringifyAsArray<T>(\n        object: Array<Array<T>>, elementType: Serializable<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): string;\n    static stringifyAsArray<T>(\n        object: Array<Array<Array<T>>>, elementType: Serializable<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): string;\n    static stringifyAsArray<T>(\n        object: Array<Array<Array<Array<T>>>>, elementType: Serializable<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): string;\n    static stringifyAsArray<T>(\n        object: Array<Array<Array<Array<Array<T>>>>>, elementType: Serializable<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): string;\n    static stringifyAsArray<T>(\n        object: Array<any>, elementType: Serializable<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): string;\n    static stringifyAsArray<T>(object: Array<any>, elementType: Serializable<T>, dimensions?: any, settings?: ITypedJSONSettings): string {\n        return new TypedJSON(elementType, settings).stringifyAsArray(object, dimensions);\n    }\n\n    static stringifyAsSet<T>(object: Set<T>, elementType: Serializable<T>, settings?: ITypedJSONSettings): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    static stringifyAsMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Serializable<K>,\n        valueCtor: Serializable<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    private static _globalConfig: ITypedJSONSettings;\n\n    static setGlobalConfig(config: ITypedJSONSettings) {\n        if (this._globalConfig) {\n            Object.assign(this._globalConfig, config);\n        } else {\n            this._globalConfig = config;\n        }\n    }\n\n    // #endregion\n\n    private serializer: Serializer = new Serializer();\n    private deserializer: Deserializer<T> = new Deserializer<T>();\n    private globalKnownTypes: Array<Constructor<any>> = [];\n    private indent: number = 0;\n    private rootConstructor: Serializable<T>;\n    private errorHandler: (e: Error) => void;\n    private nameResolver: (ctor: Function) => string;\n    private replacer?: (key: string, value: any) => any;\n\n    /**\n     * Creates a new TypedJSON instance to serialize (stringify) and deserialize (parse) object\n     *     instances of the specified root class type.\n     * @param rootConstructor The constructor of the root class type.\n     * @param settings Additional configuration settings.\n     */\n    constructor(rootConstructor: Serializable<T>, settings?: ITypedJSONSettings) {\n        const rootMetadata = JsonObjectMetadata.getFromConstructor(rootConstructor);\n\n        if (!rootMetadata || (!rootMetadata.isExplicitlyMarked && !rootMetadata.isHandledWithoutAnnotation)) {\n            throw new TypeError('The TypedJSON root data type must have the @jsonObject decorator used.');\n        }\n\n        this.nameResolver = (ctor) => nameof(ctor);\n        this.rootConstructor = rootConstructor;\n        this.errorHandler = (error) => logError(error);\n\n        if (settings) {\n            this.config(settings);\n        } else if (TypedJSON._globalConfig) {\n            this.config({});\n        }\n    }\n\n    /**\n     * Configures TypedJSON through a settings object.\n     * @param settings The configuration settings object.\n     */\n    config(settings: ITypedJSONSettings) {\n        if (TypedJSON._globalConfig) {\n            settings = {\n                ...TypedJSON._globalConfig,\n                ...settings,\n            };\n\n            if (settings.knownTypes && TypedJSON._globalConfig.knownTypes) {\n                // Merge known-types (also de-duplicate them, so Array -> Set -> Array).\n                settings.knownTypes = Array.from(new Set(\n                    settings.knownTypes.concat(TypedJSON._globalConfig.knownTypes),\n                ));\n            }\n        }\n\n        const options = extractOptionBase(settings);\n        this.serializer.options = options;\n        this.deserializer.options = options;\n\n        if (settings.errorHandler) {\n            this.errorHandler = settings.errorHandler;\n            this.deserializer.setErrorHandler(settings.errorHandler);\n            this.serializer.setErrorHandler(settings.errorHandler);\n        }\n\n        if (settings.replacer) {\nthis.replacer = settings.replacer;\n}\n        if (settings.typeResolver) {\nthis.deserializer.setTypeResolver(settings.typeResolver);\n}\n        if (settings.typeHintEmitter) {\nthis.serializer.setTypeHintEmitter(settings.typeHintEmitter);\n}\n        if (settings.indent) {\nthis.indent = settings.indent;\n}\n\n        if (settings.nameResolver) {\n            this.nameResolver = settings.nameResolver;\n            this.deserializer.setNameResolver(settings.nameResolver);\n            // this.serializer.set\n        }\n\n        if (settings.knownTypes) {\n            // Type-check knownTypes elements to recognize errors in advance.\n            settings.knownTypes.forEach((knownType, i) => {\n                // tslint:disable-next-line:no-null-keyword\n                if (typeof knownType === 'undefined' || knownType === null) {\n                    logWarning(\n                        `TypedJSON.config: 'knownTypes' contains an undefined/null value (element ${i}).`,\n);\n                }\n            });\n\n            this.globalKnownTypes = settings.knownTypes;\n        }\n    }\n\n    /**\n     * Converts a JSON string to the root class type.\n     * @param object The JSON to parse and convert.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns Deserialized T or undefined if there were errors.\n     */\n    parse(object: any): T | undefined {\n        const json = parseToJSObject(object, this.rootConstructor);\n\n        const rootMetadata = JsonObjectMetadata.getFromConstructor(this.rootConstructor);\n        let result: T | undefined;\n        const knownTypes = new Map<string, Function>();\n\n        this.globalKnownTypes.filter(ktc => ktc).forEach(knownTypeCtor => {\n            knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n        });\n\n        if (rootMetadata) {\n            rootMetadata.knownTypes.forEach(knownTypeCtor => {\n                knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n            });\n        }\n\n        try {\n            result = this.deserializer.convertSingleValue(\n                json,\n                ensureTypeDescriptor(this.rootConstructor),\n                knownTypes,\n            ) as T;\n        } catch (e) {\n            this.errorHandler(e);\n        }\n\n        return result;\n    }\n\n    parseAsArray(object: any, dimensions?: 1): Array<T>;\n    parseAsArray(object: any, dimensions: 2): Array<Array<T>>;\n    parseAsArray(object: any, dimensions: 3): Array<Array<Array<T>>>;\n    parseAsArray(object: any, dimensions: 4): Array<Array<Array<Array<T>>>>;\n    parseAsArray(object: any, dimensions: 5): Array<Array<Array<Array<Array<T>>>>>;\n    parseAsArray(object: any, dimensions: number): Array<any>;\n    parseAsArray(object: any, dimensions: number = 1): Array<any> {\n        const json = parseToJSObject(object, Array);\n        return this.deserializer.convertSingleValue(\njson,\n            createArrayType(ensureTypeDescriptor(this.rootConstructor), dimensions),\n            this._mapKnownTypes(this.globalKnownTypes),\n        );\n    }\n\n    parseAsSet(object: any): Set<T> {\n        const json = parseToJSObject(object, Set);\n        return this.deserializer.convertSingleValue(\njson,\n            SetT(this.rootConstructor),\n            this._mapKnownTypes(this.globalKnownTypes),\n        );\n    }\n\n    parseAsMap<K>(object: any, keyConstructor: Serializable<K>): Map<K, T> {\n        const json = parseToJSObject(object, Map);\n        return this.deserializer.convertSingleValue(\n            json,\n            MapT(keyConstructor, this.rootConstructor),\n            this._mapKnownTypes(this.globalKnownTypes),\n        );\n    }\n\n    /**\n     * Converts an instance of the specified class type to a plain JSON object.\n     * @param object The instance to convert to a JSON string.\n     * @returns Serialized object or undefined if an error has occured.\n     */\n    toPlainJson(object: T): JsonTypes {\n        try {\n            return this.serializer.convertSingleValue(\n                object,\n                ensureTypeDescriptor(this.rootConstructor),\n            );\n        } catch (e) {\n            this.errorHandler(e);\n        }\n    }\n\n    toPlainArray(object: Array<T>, dimensions?: 1): Array<Object>;\n    toPlainArray(object: Array<Array<T>>, dimensions: 2): Array<Array<Object>>;\n    toPlainArray(object: Array<Array<Array<T>>>, dimensions: 3): Array<Array<Array<Object>>>;\n    toPlainArray(object: Array<Array<Array<Array<T>>>>, dimensions: 4): Array<Array<Array<Array<Object>>>>;\n    toPlainArray(object: Array<Array<Array<Array<Array<T>>>>>, dimensions: 5): Array<Array<Array<Array<Array<Object>>>>>;\n    toPlainArray(object: Array<any>, dimensions: 1 | 2 | 3 | 4 | 5 = 1): Array<Object> | undefined {\n        try {\n            return this.serializer.convertSingleValue(object, createArrayType(ensureTypeDescriptor(this.rootConstructor), dimensions));\n        } catch (e) {\n            this.errorHandler(e);\n        }\n    }\n\n    toPlainSet(object: Set<T>): Array<Object> | undefined {\n        try {\n            return this.serializer.convertSingleValue(object, SetT(this.rootConstructor));\n        } catch (e) {\n            this.errorHandler(e);\n        }\n    }\n\n    toPlainMap<K>(object: Map<K, T>, keyConstructor: Serializable<K>): IndexedObject | Array<{ key: any; value: any }> | undefined {\n        try {\n            return this.serializer.convertSingleValue(object, MapT(keyConstructor, this.rootConstructor));\n        } catch (e) {\n            this.errorHandler(e);\n        }\n    }\n\n    /**\n     * Converts an instance of the specified class type to a JSON string.\n     * @param object The instance to convert to a JSON string.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns String with the serialized object or an empty string if an error has occured, but\n     *     the errorHandler did not throw.\n     */\n    stringify(object: T): string {\n        const result = this.toPlainJson(object);\n        if (result === undefined) {\n            return '';\n        }\n        return JSON.stringify(result, this.replacer, this.indent);\n    }\n\n    stringifyAsArray(object: Array<T>, dimensions?: 1): string;\n    stringifyAsArray(object: Array<Array<T>>, dimensions: 2): string;\n    stringifyAsArray(object: Array<Array<Array<T>>>, dimensions: 3): string;\n    stringifyAsArray(object: Array<Array<Array<Array<T>>>>, dimensions: 4): string;\n    stringifyAsArray(object: Array<Array<Array<Array<Array<T>>>>>, dimensions: 5): string;\n    stringifyAsArray(object: Array<any>, dimensions: any): string {\n        return JSON.stringify(this.toPlainArray(object, dimensions), this.replacer, this.indent);\n    }\n\n    stringifyAsSet(object: Set<T>): string {\n        return JSON.stringify(this.toPlainSet(object), this.replacer, this.indent);\n    }\n\n    stringifyAsMap<K>(object: Map<K, T>, keyConstructor: Serializable<K>): string {\n        return JSON.stringify(this.toPlainMap(object, keyConstructor), this.replacer, this.indent);\n    }\n\n    private _mapKnownTypes(constructors: Array<Constructor<any>>) {\n        const map = new Map<string, Constructor<any>>();\n\n        constructors.filter(ctor => ctor).forEach(ctor => map.set(this.nameResolver(ctor), ctor));\n\n        return map;\n    }\n}\n","import {JsonObjectMetadata, TypeHintEmitter, TypeResolver} from './metadata';\nimport {extractOptionBase, OptionsBase} from './options-base';\nimport {Serializable} from './types';\n\nexport type InitializerCallback<T> = (sourceObject: T, rawSourceObject: T) => T;\n\nexport interface IJsonObjectOptionsBase extends OptionsBase {\n    /**\n     * An array of known types to recognize when encountering type-hints.\n     */\n    knownTypes?: Array<Function>;\n\n    /**\n     * A function that will emit a type hint on the resulting JSON. It will override the global typeEmitter.\n     */\n    typeHintEmitter?: TypeHintEmitter;\n\n    /**\n     * A function that given a source object will resolve the type that should be instantiated.\n     * It will override the global type resolver.\n     */\n    typeResolver?: TypeResolver;\n\n    /**\n     * The name of a static or instance method to call when deserialization\n     * of the object is completed.\n     */\n    onDeserialized?: string;\n\n    /**\n     * The name of a static or instance method to call before the serialization\n     * of the typed object is started.\n     */\n    beforeSerialization?: string;\n\n    /**\n     * The name used to differentiate between different polymorphic types.\n     */\n    name?: string;\n}\n\nexport interface IJsonObjectOptionsWithInitializer<T> extends IJsonObjectOptionsBase {\n    /**\n     * Function to call before deserializing and initializing the object, accepting two arguments:\n     *   (1) sourceObject, an 'Object' instance with all properties already deserialized, and\n     *   (2) rawSourceObject, a raw 'Object' instance representation of the current object in\n     *       the serialized JSON (i.e. without deserialized properties).\n     */\n    initializer: InitializerCallback<T>;\n}\n\nexport interface IJsonObjectOptions<T> extends IJsonObjectOptionsBase {\n    /**\n     * Function to call before deserializing and initializing the object, accepting two arguments:\n     *   (1) sourceObject, an 'Object' instance with all properties already deserialized, and\n     *   (2) rawSourceObject, a raw 'Object' instance representation of the current object in\n     *       the serialized JSON (i.e. without deserialized properties).\n     */\n    initializer?: InitializerCallback<T>;\n}\n\n/**\n * Marks that a class with a parameterized constructor is serializable using TypedJSON, with additional\n * settings. The 'initializer' setting must be specified.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptionsWithInitializer<T>): (target: Serializable<T>) => void;\n\n/**\n * Marks that a class is serializable using TypedJSON, with additional settings.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptions<T>): (target: Serializable<T>) => void;\n\n/**\n * Marks that a class with a parameterless constructor is serializable using TypedJSON.\n */\nexport function jsonObject<T>(target: Serializable<T>): void;\n\nexport function jsonObject<T extends Object>(optionsOrTarget?: IJsonObjectOptions<T> | Serializable<T>): ((target: Serializable<T>) => void) | void {\n    let options: IJsonObjectOptions<T>;\n\n    if (typeof optionsOrTarget === 'function') {\n        // jsonObject is being used as a decorator, directly.\n        options = {};\n    } else {\n        // jsonObject is being used as a decorator factory.\n        options = optionsOrTarget || {};\n    }\n\n    function decorator(\n        target: Serializable<T>,\n    ): void {\n        // Create or obtain JsonObjectMetadata object.\n        const objectMetadata = JsonObjectMetadata.ensurePresentInPrototype(target.prototype);\n\n        // Fill JsonObjectMetadata.\n        objectMetadata.isExplicitlyMarked = true;\n        objectMetadata.onDeserializedMethodName = options.onDeserialized;\n        objectMetadata.beforeSerializationMethodName = options.beforeSerialization;\n\n        if (options.typeResolver) {\n            objectMetadata.typeResolver = options.typeResolver;\n        }\n        if (options.typeHintEmitter) {\n            objectMetadata.typeHintEmitter = options.typeHintEmitter;\n        }\n\n        // T extend Object so it is fine\n        objectMetadata.initializerCallback = options.initializer as any;\n        if (options.name) {\n            objectMetadata.name = options.name;\n        }\n        const optionsBase = extractOptionBase(options);\n        if (optionsBase) {\n            objectMetadata.options = optionsBase;\n        }\n\n        if (options.knownTypes) {\n            options.knownTypes\n                .filter(knownType => Boolean(knownType))\n                .forEach(knownType => objectMetadata.knownTypes.add(knownType));\n        }\n    }\n\n    if (typeof optionsOrTarget === 'function') {\n        // jsonObject is being used as a decorator, directly.\n        decorator(optionsOrTarget);\n    } else {\n        // jsonObject is being used as a decorator factory.\n        return decorator;\n    }\n}\n\nfunction isSubClass<T>(target: Serializable<T>) {\n    return;\n}\n","import {\n    isReflectMetadataSupported, isSubtypeOf, isValueDefined, logError, logWarning, MISSING_REFLECT_CONF_MSG, nameof,\n} from './helpers';\nimport {injectMetadataInformation} from './metadata';\nimport {extractOptionBase, OptionsBase} from './options-base';\nimport {\n    ArrayTypeDescriptor,\n    ensureTypeDescriptor,\n    MapTypeDescriptor,\n    SetTypeDescriptor,\n    TypeDescriptor,\n} from './type-descriptor';\nimport {IndexedObject} from './types';\n\ndeclare abstract class Reflect {\n    static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMemberOptions extends OptionsBase {\n    /**\n     * Sets the constructor of the property.\n     * Optional with ReflectDecorators.\n     */\n    constructor?: Function | TypeDescriptor;\n\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted if the property is uninitialized/undefined. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name. */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property is part of the object when serializing, with additional options.\n * Omitting the 'constructor' option requires ReflectDecorators and that the property type is always explicitly\n * declared.\n * @param options Additional options.\n */\nexport function jsonMember(options: IJsonMemberOptions): PropertyDecorator;\n\n/**\n * Specifies that a property is part of the object when serializing.\n * This call signature requires ReflectDecorators and that the property type is always explicitly declared.\n */\nexport function jsonMember<T extends Function>(prototype: IndexedObject, propertyKey: string | symbol): void;\n\nexport function jsonMember<T extends Function>(\n    optionsOrPrototype?: IJsonMemberOptions | IndexedObject,\n    propKey?: string | symbol,\n): PropertyDecorator | void {\n    if (propKey && (typeof propKey === 'string' || typeof propKey === 'symbol')) {\n        const prototype = optionsOrPrototype as IndexedObject;\n        // For error messages.\n        const decoratorName = `@jsonMember on ${nameof(prototype.constructor)}.${String(propKey)}`;\n\n        // jsonMember used directly, no additional information directly available besides target and propKey.\n        // Obtain property constructor through ReflectDecorators.\n        if (isReflectMetadataSupported) {\n            const reflectPropCtor = Reflect.getMetadata('design:type', prototype, propKey) as Function;\n\n            if (!reflectPropCtor) {\n                logError(`${decoratorName}: could not resolve detected property constructor at runtime. ${MISSING_REFLECT_CONF_MSG}`);\n                return;\n            }\n\n            const typeDescriptor = ensureTypeDescriptor(reflectPropCtor);\n            if (isSpecialPropertyType(decoratorName, typeDescriptor)) {\n                return;\n            }\n\n            injectMetadataInformation(prototype, propKey, {\n                type: typeDescriptor,\n                key: propKey.toString(),\n                name: propKey.toString(),\n            });\n        } else {\n            logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n            return;\n        }\n    } else {\n        // jsonMember used as a decorator factory.\n        return (target: Object, _propKey: string | symbol) => {\n            const options: IJsonMemberOptions = optionsOrPrototype as IJsonMemberOptions || {};\n            let typeDescriptor: TypeDescriptor | undefined;\n            const decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(_propKey)}`; // For error messages.\n\n            if (options.hasOwnProperty('constructor')) {\n                if (!isValueDefined(options.constructor)) {\n                    logError(`${decoratorName}: cannot resolve specified property constructor at runtime.`);\n                    return;\n                }\n\n                // Property constructor has been specified. Use ReflectDecorators (if available) to check whether that constructor is correct. Warn if not.\n                typeDescriptor = ensureTypeDescriptor(options.constructor);\n                if (isReflectMetadataSupported && !isSubtypeOf(typeDescriptor.ctor, Reflect.getMetadata('design:type', target, _propKey))) {\n                    logWarning(`${decoratorName}: detected property type does not match 'constructor' option.`);\n                }\n            } else {\n                // Use ReflectDecorators to obtain property constructor.\n                if (isReflectMetadataSupported) {\n                    const reflectCtor = Reflect.getMetadata('design:type', target, _propKey) as Function;\n\n                    if (!reflectCtor) {\n                        logError(`${decoratorName}: cannot resolve detected property constructor at runtime.`);\n                        return;\n                    }\n                    typeDescriptor = ensureTypeDescriptor(reflectCtor);\n                } else if (!options.deserializer) {\n                    logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n                    return;\n                }\n            }\n\n            if (typeDescriptor && isSpecialPropertyType(decoratorName, typeDescriptor)) {\n                return;\n            }\n            injectMetadataInformation(target, _propKey, {\n                type: typeDescriptor,\n                emitDefaultValue: options.emitDefaultValue,\n                isRequired: options.isRequired,\n                options: extractOptionBase(options),\n                key: _propKey.toString(),\n                name: options.name || _propKey.toString(),\n                deserializer: options.deserializer,\n                serializer: options.serializer,\n            });\n        };\n    }\n}\n\nfunction isSpecialPropertyType(decoratorName: string, typeDescriptor: TypeDescriptor) {\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor) && typeDescriptor.ctor === Array) {\n        logError(`${decoratorName}: property is an Array. Use the jsonArrayMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (!(typeDescriptor instanceof SetTypeDescriptor) && typeDescriptor.ctor === Set) {\n        logError(`${decoratorName}: property is a Set. Use the jsonSetMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (!(typeDescriptor instanceof MapTypeDescriptor) && typeDescriptor.ctor === Map) {\n        logError(`${decoratorName}: property is a Map. Use the jsonMapMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    return false;\n}\n","import {isReflectMetadataSupported, logError, MISSING_REFLECT_CONF_MSG, nameof} from './helpers';\nimport {injectMetadataInformation} from './metadata';\nimport {extractOptionBase, OptionsBase} from './options-base';\nimport {isTypelike, SetT} from './type-descriptor';\n\ndeclare abstract class Reflect {\n    static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonSetMemberOptions extends OptionsBase {\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Set<T>.\n * @param elementConstructor Constructor of set elements (e.g. 'Number' for Set<number> or 'Date' for Set<Date>).\n * @param options Additional options.\n */\nexport function jsonSetMember(elementConstructor: Function, options: IJsonSetMemberOptions = {}) {\n    return (target: Object, propKey: string | symbol) => {\n        const decoratorName = `@jsonSetMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (!isTypelike(elementConstructor)) {\n            logError(`${decoratorName}: could not resolve constructor of set elements at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonSetMember' has been used on a set. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata('design:type', target, propKey) !== Set) {\n            logError(`${decoratorName}: property is not a Set. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            type: SetT(elementConstructor),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import {isReflectMetadataSupported, logError, MISSING_REFLECT_CONF_MSG, nameof} from './helpers';\nimport {injectMetadataInformation} from './metadata';\nimport {extractOptionBase, OptionsBase} from './options-base';\nimport {isTypelike, MapOptions, MapT, TypeDescriptor} from './type-descriptor';\n\ndeclare abstract class Reflect {\n    static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMapMemberOptions extends OptionsBase, Partial<MapOptions> {\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Map<K, V>.\n * @param keyConstructor Constructor of map keys (e.g. 'Number' for 'Map<number, Date>').\n * @param valueConstructor Constructor of map values (e.g. 'Date' for 'Map<number, Date>').\n * @param options Additional options.\n */\nexport function jsonMapMember(\n    keyConstructor: Function | TypeDescriptor,\n    valueConstructor: Function | TypeDescriptor,\n    options: IJsonMapMemberOptions = {},\n) {\n    return (target: Object, propKey: string | symbol) => {\n        const decoratorName = `@jsonMapMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (!isTypelike(keyConstructor)) {\n            logError(`${decoratorName}: could not resolve constructor of map keys at runtime.`);\n            return;\n        }\n\n        if (!isTypelike(valueConstructor)) {\n            logError(`${decoratorName}: could not resolve constructor of map values at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonMapMember' has been used on a map. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata('design:type', target, propKey) !== Map) {\n            logError(`${decoratorName}: property is not a Map. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            type: MapT(keyConstructor, valueConstructor, {shape: options.shape}),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import {TypedJSON} from '../parser';\n\n/**\n * Options for the @toJson decorator.\n */\nexport interface IToJsonOptions {\n    /**\n     * When set to true it will overwrite any toJSON already existing on the prototype.\n     */\n    overwrite?: boolean;\n}\n\n/**\n * Decorator that will generate toJSON function on the class prototype that allows\n * JSON.stringify to be used instead of TypedJSON.stringify. Under the hood it will\n * simply delegate to TypedJSON.\n * By default it will throw if the prototype already has a toJSON function defined.\n * @param target the class which prototype should be modified.\n */\nexport function toJson<T extends Object>(target: Function): void;\n/**\n * Decorator factory that accepts the options interface.\n * @param options for configuring the toJSON creation.\n */\nexport function toJson<T extends Object>(options: IToJsonOptions): ((target: Function) => void);\nexport function toJson<T extends Object>(optionsOrTarget: IToJsonOptions | Function): ((target: Function) => void) | void {\n    if (typeof optionsOrTarget === 'function') {\n        // used directly\n        toJsonDecorator(optionsOrTarget, {});\n        return;\n    }\n    // used as a factory\n    return (target: Function) => {\n        toJsonDecorator(target, optionsOrTarget);\n    };\n}\n\nfunction toJsonDecorator<T extends Object>(target: Function, options: IToJsonOptions): void {\n    if (!options.overwrite && target.prototype.toJSON) {\n        throw new Error(`${target.name} already has toJSON defined!`);\n    }\n    target.prototype.toJSON = function () {\n        return TypedJSON.toPlainJson(this, Object.getPrototypeOf(this).constructor);\n    };\n}\n","export {TypedJSON, ITypedJSONSettings, JsonTypes, defaultTypeResolver, defaultTypeEmitter} from './parser';\nexport {TypeResolver, TypeHintEmitter, JsonObjectMetadata} from './typedjson/metadata';\nexport {jsonObject} from './typedjson/json-object';\nexport {jsonMember} from './typedjson/json-member';\nexport {jsonArrayMember} from './typedjson/json-array-member';\nexport {jsonSetMember} from './typedjson/json-set-member';\nexport {jsonMapMember} from './typedjson/json-map-member';\nexport {toJson} from './typedjson/to-json';\nexport {ArrayT, SetT, MapT} from './typedjson/type-descriptor';\n"],"sourceRoot":""}